AWSTemplateFormatVersion: 2010-09-09
Description: MongoDB Template.
  This template creates the Example MongoDB Application, not including full installation and configurtion, from a prior project.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - VPNStackName
          - VPCStackName
          - CustomIdentifierFunctionsStackName
          - StandardCIDRFunctionsStackName
          - StandardAMIFunctionsStackName
          - StandardBucketsStackName
          - StandardTopicsStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - EnvironmentType
          - EnvironmentZones
          - OSName
          - OSDate
      - Label:
          default: Application Dependencies Configuration
        Parameters:
          - MongoDBProductKey
      - Label:
          default: Application Configuration
        Parameters:
          - ApplicationName
          - UseStaticAddress
          - LogRetention
          - Schedule
      - Label:
          default: Security Configuration
        Parameters:
          - AdministratorNetworks
          - IntegrationNetworks
    ParameterLabels:
      VPNStackName:
        default: VPN Stack Name
      VPCStackName:
        default: VPC Stack Name
      CustomIdentifierFunctionsStackName:
        default: CustomIdentifierFunctions Stack Name
      StandardCIDRFunctionsStackName:
        default: StandardCIDRFunctions Stack Name
      StandardAMIFunctionsStackName:
        default: StandardAMIFunctions Stack Name
      StandardBucketsStackName:
        default: StandardBuckets Stack Name
      StandardTopicsStackName:
        default: StandardTopics Stack Name
      KeyName:
        default: Key Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      OSName:
        default: Operating System Name
      OSDate:
        default: Operating System Name
      MongoDBProductKey:
        default: MongoDB Product S3 Key
      ApplicationName:
        default: Application Name
      UseStaticAddress:
        default: Use Static Address
      LogRetention:
        default: Log Retention
      Schedule:
        default: Schedule
      AdministratorNetworks:
        default: Administrator Networks
      IntegrationNetworks:
        default: Integration Networks
Parameters:
  VPNStackName:
    Description: Name of the CloudFormation Stack containing the VPN Instances
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: Production-OpenVPN
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 6
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  CustomIdentifierFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Custom Identifier
      Functions
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: CustomIdentifierFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  StandardCIDRFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Standard CIDR Functions
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: StandardCIDRFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  StandardAMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Standard AMI Functions
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: StandardAMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  StandardBucketsStackName:
    Description: Name of the CloudFormation Stack containing Standard Buckets
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: StandardBuckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  StandardTopicsStackName:
    Description: Name of the CloudFormation Stack containing Standard Topics
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: StandardTopics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Camelz
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options
      in Mappings
    Type: String
    Default: small
    AllowedValues:
      - small
      - medium
      - large
      - xlarge
    ConstraintDescription: must be small, medium, large or xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones to build
    Type: String
    Default: '2'
    AllowedValues:
      - '1'
      - '2'
    ConstraintDescription: must be 1 or 2.
  OSName:
    Description: The Operating System to use for Instances
    Type: String
    Default: RHEL 7.3
    AllowedValues:
      - Amazon Linux
      - Amazon Linux 2017.03.0
      - RHEL 7
      - RHEL 7.4
      - RHEL 7.3
    ConstraintDescription: must be "Amazon Linux" (latest), "Amazon Linux 2017.03.0",
      "RHEL 7" (latest), "RHEL 7.4" or "RHEL 7.3".
  OSDate:
    Description: Optional Operating System Date, specify to select a specific publication
      date for the Image
    Type: String
    Default: '20161026'
    AllowedPattern: (^$|^20(1[6-9]|[2-9][0-9])(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$)
    ConstraintDescription: Must be a valid date in YYYYMMDD format.
  MongoDBProductKey:
    Description: Optional key of Object within the S3 Bucket containing the MongoDB installer
    Type: String
    Default: ''
    AllowedPattern: (^$|^(?:Linux|MongoDB)\/[-_.a-zA-Z0-9]*\.(?:zip|tgz|tar\.gz|gz)$)
    ConstraintDescription: must be a valid installer filename, within the Linux or MongoDB folders, if specified.
  ApplicationName:
    Description: Name of the Application associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: MongoDB
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters.
  UseStaticAddress:
    Description: Create and attach a separate Static Address
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events (0 disables use of
      CloudWatch Logs)
    Type: Number
    Default: 14
    AllowedValues:
      - 0
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: 'must be: 0 (disabled), 1, 3, 5, 7, 14, 30, 60, 90, 120,
      150, 180, 365, 400, 545, 731, 1827 or 3653.'
  Schedule:
    Description: Schedule Tag Value (blank disables Scheduler)
    Type: String
    Default: ''
    AllowedPattern: (^$|^([0-9]|1[0-9]|2[0-3]):[0-5][0-9]-([0-9]|1[0-9]|2[0-3]):[0-5][0-9]T?$)
    ConstraintDescription: See Scheduler Lambda Function description for Tag format.
  AdministratorNetworks:
    Description: Networks that can administer the Application
    Type: String
    Default: NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP
      CIDR range of the form x.x.x.x/x or the word NONE.
  IntegrationNetworks:
    Description: Networks that can integrate with the Application
    Type: String
    Default: NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP
      CIDR range of the form x.x.x.x/x or the word NONE.
Mappings:
  InstanceTypeMap:
    Database:
      small: t2.large
      medium: r4.2xlarge
      large: r4.4xlarge
      xlarge: r4.8xlarge
Conditions:
  ConfigureGlobalS3: !Equals
    - !Ref 'AWS::Region'
    - us-east-1
  ConfigureKey: !Not
    - !Equals
      - !Ref 'KeyName'
      - ''
  ConfigureMultiZone: !Not
    - !Equals
      - !Ref 'EnvironmentZones'
      - '1'
  ConfigureAMZN: !Equals
    - !Select
      - '0'
      - !Split
        - ' '
        - !Ref 'OSName'
    - Amazon
  ConfigureRHEL: !Equals
    - !Select
      - '0'
      - !Split
        - ' '
        - !Ref 'OSName'
    - RHEL
  InstallMongoDBProduct: !Not [ !Equals [ !Ref MongoDBProductKey, '' ]]
  ConfigureStaticAddress: !Equals
    - !Ref 'UseStaticAddress'
    - 'true'
  ConfigureStaticAddress&MultiZone: !And
    - !Condition 'ConfigureStaticAddress'
    - !Condition 'ConfigureMultiZone'
  ConfigureLogs: !Not
    - !Equals
      - !Ref 'LogRetention'
      - '0'
  ConfigureSchedule: !Not
    - !Equals
      - !Ref 'Schedule'
      - ''
  ConfigureAdministratorNetwork0: !Not
    - !Equals
      - !Select
        - '0'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork1: !Not
    - !Equals
      - !Select
        - '1'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork2: !Not
    - !Equals
      - !Select
        - '2'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork3: !Not
    - !Equals
      - !Select
        - '3'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork4: !Not
    - !Equals
      - !Select
        - '4'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork5: !Not
    - !Equals
      - !Select
        - '5'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork6: !Not
    - !Equals
      - !Select
        - '6'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork7: !Not
    - !Equals
      - !Select
        - '7'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureIntegrationNetwork0: !Not
    - !Equals
      - !Select
        - '0'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork1: !Not
    - !Equals
      - !Select
        - '1'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork2: !Not
    - !Equals
      - !Select
        - '2'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork3: !Not
    - !Equals
      - !Select
        - '3'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork4: !Not
    - !Equals
      - !Select
        - '4'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork5: !Not
    - !Equals
      - !Select
        - '5'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork6: !Not
    - !Equals
      - !Select
        - '6'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork7: !Not
    - !Equals
      - !Select
        - '7'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  DownloadScriptFromS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DownloadScriptFromS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub
                - arn:aws:s3:::${Param1}/${SharedScriptFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ScriptsBucket
              - !Sub
                - arn:aws:s3:::${Param1}/${ScriptFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ScriptsBucket
      Roles:
        - !Ref 'Role'
  DownloadProductFromS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DownloadProductFromS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub
                - arn:aws:s3:::${Param1}/${SharedProductFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ProductsBucket
              - !Sub
                - arn:aws:s3:::${Param1}/${ProductFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ProductsBucket
      Roles:
        - !Ref 'Role'
  DownloadConfigurationFromS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DownloadConfigurationFromS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub
                - arn:aws:s3:::${Param1}/${SharedConfigurationFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ConfigurationsBucket
              - !Sub
                - arn:aws:s3:::${Param1}/${ConfigurationFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ConfigurationsBucket
      Roles:
        - !Ref 'Role'
  LogMonitoringPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LogMonitoringPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
      Roles:
        - !Ref 'Role'
    Condition: ConfigureLogs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref 'LogRetention'
    Condition: ConfigureLogs
  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${Param1}-${ApplicationName}-ClientSecurityGroup
        - Param1: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-ClientSecurityGroup
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${Param1}-${ApplicationName}-InstanceSecurityGroup
        - Param1: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: '0'
          ToPort: '0'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '3'
          ToPort: '3'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '8'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '11'
          ToPort: '11'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Select
              - '0'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Select
              - '1'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Select
              - '2'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Select
              - '3'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Select
              - '4'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Select
              - '5'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Select
              - '6'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: !Select
              - '7'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - IpProtocol: tcp
          FromPort: '27017'
          ToPort: '27017'
          SourceSecurityGroupId: !Ref 'ClientSecurityGroup'
        - IpProtocol: tcp
          FromPort: '28017'
          ToPort: '28017'
          SourceSecurityGroupId: !Ref 'ClientSecurityGroup'
        - !If
          - ConfigureIntegrationNetwork0
          - IpProtocol: tcp
            FromPort: '27017'
            ToPort: '27017'
            CidrIp: !Select
              - '0'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork0
          - IpProtocol: tcp
            FromPort: '28017'
            ToPort: '28017'
            CidrIp: !Select
              - '0'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork1
          - IpProtocol: tcp
            FromPort: '27017'
            ToPort: '27017'
            CidrIp: !Select
              - '1'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork1
          - IpProtocol: tcp
            FromPort: '28017'
            ToPort: '28017'
            CidrIp: !Select
              - '1'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork2
          - IpProtocol: tcp
            FromPort: '27017'
            ToPort: '27017'
            CidrIp: !Select
              - '2'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork2
          - IpProtocol: tcp
            FromPort: '28017'
            ToPort: '28017'
            CidrIp: !Select
              - '2'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork3
          - IpProtocol: tcp
            FromPort: '27017'
            ToPort: '27017'
            CidrIp: !Select
              - '3'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork3
          - IpProtocol: tcp
            FromPort: '28017'
            ToPort: '28017'
            CidrIp: !Select
              - '3'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork4
          - IpProtocol: tcp
            FromPort: '27017'
            ToPort: '27017'
            CidrIp: !Select
              - '4'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork4
          - IpProtocol: tcp
            FromPort: '28017'
            ToPort: '28017'
            CidrIp: !Select
              - '4'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork5
          - IpProtocol: tcp
            FromPort: '27017'
            ToPort: '27017'
            CidrIp: !Select
              - '5'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork5
          - IpProtocol: tcp
            FromPort: '28017'
            ToPort: '28017'
            CidrIp: !Select
              - '5'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork6
          - IpProtocol: tcp
            FromPort: '27017'
            ToPort: '27017'
            CidrIp: !Select
              - '6'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork6
          - IpProtocol: tcp
            FromPort: '28017'
            ToPort: '28017'
            CidrIp: !Select
              - '6'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork7
          - IpProtocol: tcp
            FromPort: '27017'
            ToPort: '27017'
            CidrIp: !Select
              - '7'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork7
          - IpProtocol: tcp
            FromPort: '28017'
            ToPort: '28017'
            CidrIp: !Select
              - '7'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-InstanceSecurityGroup
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroupIngress27017:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'InstanceSecurityGroup'
      IpProtocol: tcp
      FromPort: '27017'
      ToPort: '27017'
      SourceSecurityGroupId: !Ref 'InstanceSecurityGroup'
  InstanceSecurityGroupIngress27019:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'InstanceSecurityGroup'
      IpProtocol: tcp
      FromPort: '27019'
      ToPort: '27019'
      SourceSecurityGroupId: !Ref 'InstanceSecurityGroup'
  GetHostName:
    Type: Custom::GetHostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn
      CompanyName: !Ref 'CompanyName'
      LocationName: !Ref 'AWS::Region'
      EnvironmentName: !ImportValue
        Fn::Sub: ${VPCStackName}-VPCName
      ApplicationName: !Ref 'ApplicationName'
  GetAmazonLinuxImageId:
    Type: Custom::GetAmazonLinuxImageId
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${StandardAMIFunctionsStackName}-GetAmazonLinuxImageIdFunctionArn
      Region: !Ref 'AWS::Region'
      OSName: !Ref 'OSName'
      OSDate: !Ref 'OSDate'
    Condition: ConfigureAMZN
  GetRHELImageId:
    Type: Custom::GetRHELImageId
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${StandardAMIFunctionsStackName}-GetRHELImageIdFunctionArn
      Region: !Ref 'AWS::Region'
      OSName: !Ref 'OSName'
      OSDate: !Ref 'OSDate'
    Condition: ConfigureRHEL
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'Role'
  AddressCalculatorA:
    Type: Custom::AddressCalculator
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn
      SubnetId: !ImportValue
        Fn::Sub: ${VPCStackName}-Database1SubnetA
    Condition: ConfigureStaticAddress
  Instance01A:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref 'Role'
          buckets:
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ProductsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ConfigurationsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpdateOS
            - !If
              - ConfigureAMZN
              - ConfigureOSUpdates
              - !Ref 'AWS::NoValue'
            - InstallSSMAgent
            - !If
              - ConfigureLogs
              - !If
                - ConfigureAMZN
                - InstallLogs
                - BuildLogs
              - !Ref 'AWS::NoValue'
            - !If
              - ConfigureLogs
              - ConfigureLogs
              - !Ref 'AWS::NoValue'
            - ConfigureCFN
            - ConfigureVolumes
            - ConfigureOS
            - ConfigureHostName
            - !If
              - InstallMongoDBProduct
              - InstallMongoDBProduct
              - !Ref 'AWS::NoValue'
            - !If
              - InstallMongoDBConfiguration
              - InstallMongoDBConfiguration
              - !Ref 'AWS::NoValue'
        UpdateOS:
          commands:
            01_yum_update:
              command: yum update -y
              ignoreErrors: 'false'
        ConfigureOSUpdates:
          packages:
            yum:
              yum-cron: []
          files:
            /etc/yum/yum-cron.conf:
              content: |-
                [commands]
                update_cmd = security
                update_messages = yes
                download_updates = yes
                apply_updates = yes
                random_sleep = 10
              mode: '000644'
              owner: root
              group: root
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallLogs:
          packages:
            yum:
              awslogs: []
        BuildLogs:
          files:
            /etc/awslogs/awscli.conf:
              content: |-
                [plugins]
                cwlogs = cwlogs
                [default]
                region = us-east-1
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: |-
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = /var/log/messages
              mode: '000644'
              owner: root
              group: root
            /root/bin/buildawslogs:
              content: !Sub
                - |-
                  #!/bin/bash
                  zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)
                  region=${!zone::-1}
                  cd /var/tmp
                  curl -O https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
                  ${Param1}
                  # Create symlinks to make setup work like rpm
                  ln -s /var/awslogs /var/lib/awslogs
                  mv /var/awslogs/etc/aws.conf /var/awslogs/etc/aws.conf.bak
                  ln -s /etc/awslogs/awscli.conf /var/awslogs/etc/aws.conf
                  mv /var/awslogs/etc/awslogs.conf /var/awslogs/etc/awslogs.conf.bak
                  ln -s /etc/awslogs/awslogs.conf /var/awslogs/etc/awslogs.conf
                - Param1: !Sub 'python awslogs-agent-setup.py --non-interactive --configfile
                    /etc/awslogs/awslogs.conf --region ${AWS::Region}'
              mode: '000700'
              owner: root
              group: root
          commands:
            01_buildawslogs:
              command: /root/bin/buildawslogs
        ConfigureLogs:
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub
                - |-
                  [default]
                  ${Param1}
                  [plugins]
                  cwlogs = cwlogs
                - Param1: !Sub 'region = ${AWS::Region}'
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub
                - |-
                  [general]
                  state_file = /var/lib/awslogs/agent-state
                  [/var/log/messages]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/messages
                  log_stream_name = MongoDB/{instance_id}/var/log/messages
                  ${Param1}
                  [/var/log/secure]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/secure
                  log_stream_name = MongoDB/{instance_id}/var/log/secure
                  ${Param1}
                  [/var/log/cron]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/cron
                  log_stream_name = MongoDB/{instance_id}/var/log/cron
                  ${Param1}
                  [/var/log/cloud-init.log]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/cloud-init.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cloud-init.log
                  ${Param1}
                  [/var/log/cfn-init.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-init.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cfn-init.log
                  ${Param1}
                  [/var/log/cfn-hup.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-hup.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cfn-hup.log
                  ${Param1}
                  [/var/log/cfn-init-cmd.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-init-cmd.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cfn-init-cmd.log
                  ${Param1}
                  [/var/log/cloud-init-output.log]
                  file = /var/log/cloud-init-output.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cloud-init-output.log
                  ${Param1}
                  [/var/log/dmesg]
                  file = /var/log/dmesg
                  log_stream_name = MongoDB/{instance_id}/var/log/dmesg
                  ${Param1}
                  [/var/log/httpd/access_log]
                  file = /var/log/httpd/access_log
                  log_stream_name = MongoDB/{instance_id}/var/log/httpd/access_log
                  ${Param1}
                  [/var/log/httpd/error_log]
                  file = /var/log/httpd/error_log
                  log_stream_name = MongoDB/{instance_id}/var/log/httpd/error_log
                  ${Param1}
                - Param1: !If
                    - ConfigureLogs
                    - !Sub 'log_group_name = ${LogGroup}'
                    - !Ref 'AWS::NoValue'
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                packages:
                  yum:
                    - awslogs
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub
                - |-
                  [main]
                  ${Param1}
                  ${Param2}
                - Param1: !Sub 'stack=${AWS::StackId}'
                  Param2: !Sub 'region=${AWS::Region}'
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub
                - |-
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.Instance01A.Metadata.AWS::CloudFormation::Init
                  ${Param1}
                - Param1: !Sub 'action=/opt/aws/bin/cfn-init --verbose --configsets
                    All --stack ${AWS::StackName} --resource Instance01A --region
                    ${AWS::Region}'
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        ConfigureVolumes:
          packages:
            yum:
              parted: []
              xfsprogs: []
          files:
            /root/bin/configurevolumes:
              content: |-
                #!/bin/bash
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for Instance to recognize Volume /dev/xvdb"
                attempt=0
                attempts=30
                delay=5
                while ((attempt++ <= attempts)); do
                    if fdisk -l /dev/xvdb &> /dev/null; then
                        break
                    else
                        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdb not yet attached, pausing $delay seconds..."
                        sleep $delay
                    fi
                done
                filesystem_type=$(file -sL /dev/xvdb)
                if [[ $filesystem_type == *"XFS"* ]]; then
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdb formatted with XFS Filesystem"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Existing Volume: using Snapshot, or mapping Volume to replacement Instance"
                else
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdb not formatted"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] New Volume: mounted to initial Instance"
                    mkfs -t xfs /dev/xvdb 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                    xfs_admin -L mongodb_data /dev/xvdb 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                fi
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add Volume /dev/xvdb MountPoint to /etc/fstab"
                sed -i -e "/\/data/d" /etc/fstab
                sed -i -e "/^LABEL=\// aLABEL=mongodb_data /data xfs     defaults,noatime  1   1" /etc/fstab
                sed -i -e "/^UUID=[^ ]* \// aLABEL=mongodb_data /data xfs     defaults,noatime  1   1" /etc/fstab
                mkdir /data 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /data"
                mount /data 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"

                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for Instance to recognize Volume /dev/xvdc"
                attempt=0
                attempts=30
                delay=5
                while ((attempt++ <= attempts)); do
                    if fdisk -l /dev/xvdc &> /dev/null; then
                        break
                    else
                        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdc not yet attached, pausing $delay seconds..."
                        sleep $delay
                    fi
                done
                filesystem_type=$(file -sL /dev/xvdc)
                if [[ $filesystem_type == *"XFS"* ]]; then
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdc formatted with XFS Filesystem"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Existing Volume: using Snapshot, or mapping Volume to replacement Instance"
                else
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdc not formatted"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] New Volume: mounted to initial Instance"
                    mkfs -t xfs /dev/xvdc 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                    xfs_admin -L mongodb_jrnl /dev/xvdc 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                fi
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add Volume /dev/xvdc MountPoint to /etc/fstab"
                sed -i -e "/\/journal/d" /etc/fstab
                sed -i -e "/^LABEL=\// aLABEL=mongodb_jrnl /journal xfs     defaults,noatime  1   1" /etc/fstab
                sed -i -e "/^UUID=[^ ]* \// aLABEL=mongodb_jrnl /journal xfs     defaults,noatime  1   1" /etc/fstab
                mkdir /journal 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /journal"
                mount /journal 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"

                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for Instance to recognize Volume /dev/xvdd"
                attempt=0
                attempts=30
                delay=5
                while ((attempt++ <= attempts)); do
                    if fdisk -l /dev/xvdd &> /dev/null; then
                        break
                    else
                        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdd not yet attached, pausing $delay seconds..."
                        sleep $delay
                    fi
                done
                filesystem_type=$(file -sL /dev/xvdd)
                if [[ $filesystem_type == *"XFS"* ]]; then
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdd formatted with XFS Filesystem"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Existing Volume: using Snapshot, or mapping Volume to replacement Instance"
                else
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdd not formatted"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] New Volume: mounted to initial Instance"
                    mkfs -t xfs /dev/xvdd 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                    xfs_admin -L mongodb_log /dev/xvdd 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                fi
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add Volume /dev/xvdd MountPoint to /etc/fstab"
                sed -i -e "/\/log/d" /etc/fstab
                sed -i -e "/^LABEL=\// aLABEL=mongodb_log /log xfs     defaults,noatime  1   1" /etc/fstab
                sed -i -e "/^UUID=[^ ]* \// aLABEL=mongodb_log /log xfs     defaults,noatime  1   1" /etc/fstab
                mkdir /log 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /log"
                mount /log 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-volumes:
              command: /root/bin/configurevolumes
              ignoreErrors: 'false'
        ConfigureOS:
          files:
            /etc/profile.d/local.sh:
              content: |-
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureHostName:
          files:
            /root/bin/sethostname:
              content: |-
                #!/bin/bash
                while getopts a:b:H:I:D: arg; do
                    case $arg in
                    a)  zonea="$OPTARG";;
                    b)  zoneb="$OPTARG";;
                    H)  host="$OPTARG";;
                    I)  instance="$OPTARG";;
                    D)  domain="$OPTARG";;
                    esac
                done
                zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)
                region=${!zone::-1}
                case $zone in
                  $zonea) hostname=${!host}${!instance}a.$domain;;
                  $zoneb) hostname=${!host}${!instance}b.$domain;;
                esac
                address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4)
                sed -i -e "/^$address/d" -e "$ a$address $hostname" /etc/hosts
                echo $hostname > /etc/hostname
                hostname $hostname
              mode: '000700'
              owner: root
              group: root
          commands:
            01-sethostname:
              command: !Sub
                - /root/bin/sethostname -a ${Param1} -b ${Param2} -H ${GetHostName.HostName}
                  -I 01 -D ${Param3}
                - Param1: !ImportValue
                    Fn::Sub: ${VPCStackName}-ZoneA
                  Param2: !ImportValue
                    Fn::Sub: ${VPCStackName}-ZoneB
                  Param3: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: 'false'
        InstallMongoDBProduct:
          sources:
            /var/tmp: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${MongoDBProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
    Properties:
      ImageId: !If
        - ConfigureAMZN
        - !GetAtt 'GetAmazonLinuxImageId.ImageId'
        - !GetAtt 'GetRHELImageId.ImageId'
      InstanceType: !FindInMap
        - InstanceTypeMap
        - Database
        - !Ref 'EnvironmentType'
      IamInstanceProfile: !Ref 'InstanceProfile'
      KeyName: !If
        - ConfigureKey
        - !Ref 'KeyName'
        - !Ref 'AWS::NoValue'
      NetworkInterfaces:
        - Description: !Sub
            - ${Param1}-${ApplicationName}-NetworkInterface01A-eth0
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
          DeviceIndex: '0'
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-Database1SubnetA
          PrivateIpAddress: !If
            - ConfigureStaticAddress
            - !GetAtt 'AddressCalculatorA.Address4'
            - !Ref 'AWS::NoValue'
          GroupSet:
            - !Ref 'InstanceSecurityGroup'
          AssociatePublicIpAddress: 'false'
          DeleteOnTermination: 'true'
      BlockDeviceMappings:
        - DeviceName: !If
            - ConfigureAMZN
            - /dev/xvdb
            - /dev/sdb
          Ebs:
            VolumeType: gp2
            VolumeSize: '64'
        - DeviceName: !If
            - ConfigureAMZN
            - /dev/xvdc
            - /dev/sdc
          Ebs:
            VolumeType: gp2
            VolumeSize: '16'
        - DeviceName: !If
            - ConfigureAMZN
            - /dev/xvdd
            - /dev/sdd
          Ebs:
            VolumeType: gp2
            VolumeSize: '8'
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-Instance01A
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - Key: HostName
          Value: !Sub '${GetHostName.HostName}01a'
        - !If
          - ConfigureSchedule
          - Key: Schedule
            Value: !Ref 'Schedule'
          - !Ref 'AWS::NoValue'
      UserData: !Base64
        Fn::Sub:
          - |-
            #!/bin/bash -xe
            ${Param1}

            ${Param2}
            ${Param3}
          - Param1: !If
              - ConfigureRHEL
              - |-
                # Add to RHEL what Amazon Linux includes
                # Install EPEL
                yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
                # Install Python Pip and Python Daemon
                yum install -y python-pip python-daemon
                pip install --upgrade pip
                # Install AWS CLI
                pip install awscli
                # Install AWS CLI CloudWatch Logs Plugin
                pip install awscli-cwlogs
                # Download CFN Bootstrap
                cd /opt
                curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
                tar -xvpf aws-cfn-bootstrap-latest.tar.gz
                rm -f aws-cfn-bootstrap-latest.tar.gz
                # Build and Install CFN Bootstrap
                cd aws-cfn-bootstrap-*
                python setup.py build
                python setup.py install
                cd /opt
                rm -Rf aws-cfn-bootstrap-*
                # Create CFN Bootstrap symlinks
                ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup
                chmod 775 /usr/init/redhat/cfn-hup
                mkdir -p /opt/aws/bin
                ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup
                ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init
                ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal
                ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader
                ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata
                ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event
                ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result
              - yum update -y aws-cfn-bootstrap
            Param2: !Sub '/opt/aws/bin/cfn-init --verbose --configsets All --stack
              ${AWS::StackName} --resource Instance01A --region ${AWS::Region}'
            Param3: !Sub '/opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName}
              --resource Instance01A --region ${AWS::Region}'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
  Instance02A:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref 'Role'
          buckets:
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ProductsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ConfigurationsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpdateOS
            - !If
              - ConfigureAMZN
              - ConfigureOSUpdates
              - !Ref 'AWS::NoValue'
            - InstallSSMAgent
            - !If
              - ConfigureLogs
              - !If
                - ConfigureAMZN
                - InstallLogs
                - BuildLogs
              - !Ref 'AWS::NoValue'
            - !If
              - ConfigureLogs
              - ConfigureLogs
              - !Ref 'AWS::NoValue'
            - ConfigureCFN
            - ConfigureVolumes
            - ConfigureOS
            - ConfigureHostName
            - !If
              - InstallMongoDBProduct
              - InstallMongoDBProduct
              - !Ref 'AWS::NoValue'
            - !If
              - InstallMongoDBConfiguration
              - InstallMongoDBConfiguration
              - !Ref 'AWS::NoValue'
        UpdateOS:
          commands:
            01_yum_update:
              command: yum update -y
              ignoreErrors: 'false'
        ConfigureOSUpdates:
          packages:
            yum:
              yum-cron: []
          files:
            /etc/yum/yum-cron.conf:
              content: |-
                [commands]
                update_cmd = security
                update_messages = yes
                download_updates = yes
                apply_updates = yes
                random_sleep = 10
              mode: '000644'
              owner: root
              group: root
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallLogs:
          packages:
            yum:
              awslogs: []
        BuildLogs:
          files:
            /etc/awslogs/awscli.conf:
              content: |-
                [plugins]
                cwlogs = cwlogs
                [default]
                region = us-east-1
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: |-
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = /var/log/messages
              mode: '000644'
              owner: root
              group: root
            /root/bin/buildawslogs:
              content: !Sub
                - |-
                  #!/bin/bash
                  zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)
                  region=${!zone::-1}
                  cd /var/tmp
                  curl -O https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
                  ${Param1}
                  # Create symlinks to make setup work like rpm
                  ln -s /var/awslogs /var/lib/awslogs
                  mv /var/awslogs/etc/aws.conf /var/awslogs/etc/aws.conf.bak
                  ln -s /etc/awslogs/awscli.conf /var/awslogs/etc/aws.conf
                  mv /var/awslogs/etc/awslogs.conf /var/awslogs/etc/awslogs.conf.bak
                  ln -s /etc/awslogs/awslogs.conf /var/awslogs/etc/awslogs.conf
                - Param1: !Sub 'python awslogs-agent-setup.py --non-interactive --configfile
                    /etc/awslogs/awslogs.conf --region ${AWS::Region}'
              mode: '000700'
              owner: root
              group: root
          commands:
            01_buildawslogs:
              command: /root/bin/buildawslogs
        ConfigureLogs:
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub
                - |-
                  [default]
                  ${Param1}
                  [plugins]
                  cwlogs = cwlogs
                - Param1: !Sub 'region = ${AWS::Region}'
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub
                - |-
                  [general]
                  state_file = /var/lib/awslogs/agent-state
                  [/var/log/messages]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/messages
                  log_stream_name = MongoDB/{instance_id}/var/log/messages
                  ${Param1}
                  [/var/log/secure]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/secure
                  log_stream_name = MongoDB/{instance_id}/var/log/secure
                  ${Param1}
                  [/var/log/cron]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/cron
                  log_stream_name = MongoDB/{instance_id}/var/log/cron
                  ${Param1}
                  [/var/log/cloud-init.log]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/cloud-init.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cloud-init.log
                  ${Param1}
                  [/var/log/cfn-init.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-init.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cfn-init.log
                  ${Param1}
                  [/var/log/cfn-hup.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-hup.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cfn-hup.log
                  ${Param1}
                  [/var/log/cfn-init-cmd.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-init-cmd.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cfn-init-cmd.log
                  ${Param1}
                  [/var/log/cloud-init-output.log]
                  file = /var/log/cloud-init-output.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cloud-init-output.log
                  ${Param1}
                  [/var/log/dmesg]
                  file = /var/log/dmesg
                  log_stream_name = MongoDB/{instance_id}/var/log/dmesg
                  ${Param1}
                  [/var/log/httpd/access_log]
                  file = /var/log/httpd/access_log
                  log_stream_name = MongoDB/{instance_id}/var/log/httpd/access_log
                  ${Param1}
                  [/var/log/httpd/error_log]
                  file = /var/log/httpd/error_log
                  log_stream_name = MongoDB/{instance_id}/var/log/httpd/error_log
                  ${Param1}
                - Param1: !If
                    - ConfigureLogs
                    - !Sub 'log_group_name = ${LogGroup}'
                    - !Ref 'AWS::NoValue'
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                packages:
                  yum:
                    - awslogs
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub
                - |-
                  [main]
                  ${Param1}
                  ${Param2}
                - Param1: !Sub 'stack=${AWS::StackId}'
                  Param2: !Sub 'region=${AWS::Region}'
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub
                - |-
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.Instance02A.Metadata.AWS::CloudFormation::Init
                  ${Param1}
                - Param1: !Sub 'action=/opt/aws/bin/cfn-init --verbose --configsets
                    All --stack ${AWS::StackName} --resource Instance02A --region
                    ${AWS::Region}'
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        ConfigureVolumes:
          packages:
            yum:
              parted: []
              xfsprogs: []
          files:
            /root/bin/configurevolumes:
              content: |-
                #!/bin/bash
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for Instance to recognize Volume /dev/xvdb"
                attempt=0
                attempts=30
                delay=5
                while ((attempt++ <= attempts)); do
                    if fdisk -l /dev/xvdb &> /dev/null; then
                        break
                    else
                        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdb not yet attached, pausing $delay seconds..."
                        sleep $delay
                    fi
                done
                filesystem_type=$(file -sL /dev/xvdb)
                if [[ $filesystem_type == *"XFS"* ]]; then
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdb formatted with XFS Filesystem"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Existing Volume: using Snapshot, or mapping Volume to replacement Instance"
                else
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdb not formatted"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] New Volume: mounted to initial Instance"
                    mkfs -t xfs /dev/xvdb 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                    xfs_admin -L mongodb_data /dev/xvdb 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                fi
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add Volume /dev/xvdb MountPoint to /etc/fstab"
                sed -i -e "/\/data/d" /etc/fstab
                sed -i -e "/^LABEL=\// aLABEL=mongodb_data /data xfs     defaults,noatime  1   1" /etc/fstab
                sed -i -e "/^UUID=[^ ]* \// aLABEL=mongodb_data /data xfs     defaults,noatime  1   1" /etc/fstab
                mkdir /data 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /data"
                mount /data 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"

                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for Instance to recognize Volume /dev/xvdc"
                attempt=0
                attempts=30
                delay=5
                while ((attempt++ <= attempts)); do
                    if fdisk -l /dev/xvdc &> /dev/null; then
                        break
                    else
                        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdc not yet attached, pausing $delay seconds..."
                        sleep $delay
                    fi
                done
                filesystem_type=$(file -sL /dev/xvdc)
                if [[ $filesystem_type == *"XFS"* ]]; then
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdc formatted with XFS Filesystem"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Existing Volume: using Snapshot, or mapping Volume to replacement Instance"
                else
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdc not formatted"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] New Volume: mounted to initial Instance"
                    mkfs -t xfs /dev/xvdc 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                    xfs_admin -L mongodb_jrnl /dev/xvdc 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                fi
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add Volume /dev/xvdc MountPoint to /etc/fstab"
                sed -i -e "/\/journal/d" /etc/fstab
                sed -i -e "/^LABEL=\// aLABEL=mongodb_jrnl /journal xfs     defaults,noatime  1   1" /etc/fstab
                sed -i -e "/^UUID=[^ ]* \// aLABEL=mongodb_jrnl /journal xfs     defaults,noatime  1   1" /etc/fstab
                mkdir /journal 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /journal"
                mount /journal 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"

                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for Instance to recognize Volume /dev/xvdd"
                attempt=0
                attempts=30
                delay=5
                while ((attempt++ <= attempts)); do
                    if fdisk -l /dev/xvdd &> /dev/null; then
                        break
                    else
                        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdd not yet attached, pausing $delay seconds..."
                        sleep $delay
                    fi
                done
                filesystem_type=$(file -sL /dev/xvdd)
                if [[ $filesystem_type == *"XFS"* ]]; then
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdd formatted with XFS Filesystem"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Existing Volume: using Snapshot, or mapping Volume to replacement Instance"
                else
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdd not formatted"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] New Volume: mounted to initial Instance"
                    mkfs -t xfs /dev/xvdd 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                    xfs_admin -L mongodb_log /dev/xvdd 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                fi
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add Volume /dev/xvdd MountPoint to /etc/fstab"
                sed -i -e "/\/log/d" /etc/fstab
                sed -i -e "/^LABEL=\// aLABEL=mongodb_log /log xfs     defaults,noatime  1   1" /etc/fstab
                sed -i -e "/^UUID=[^ ]* \// aLABEL=mongodb_log /log xfs     defaults,noatime  1   1" /etc/fstab
                mkdir /log 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /log"
                mount /log 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-volumes:
              command: /root/bin/configurevolumes
              ignoreErrors: 'false'
        ConfigureOS:
          files:
            /etc/profile.d/local.sh:
              content: |-
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureHostName:
          files:
            /root/bin/sethostname:
              content: |-
                #!/bin/bash
                while getopts a:b:H:I:D: arg; do
                    case $arg in
                    a)  zonea="$OPTARG";;
                    b)  zoneb="$OPTARG";;
                    H)  host="$OPTARG";;
                    I)  instance="$OPTARG";;
                    D)  domain="$OPTARG";;
                    esac
                done
                zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)
                region=${!zone::-1}
                case $zone in
                  $zonea) hostname=${!host}${!instance}a.$domain;;
                  $zoneb) hostname=${!host}${!instance}b.$domain;;
                esac
                address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4)
                sed -i -e "/^$address/d" -e "$ a$address $hostname" /etc/hosts
                echo $hostname > /etc/hostname
                hostname $hostname
              mode: '000700'
              owner: root
              group: root
          commands:
            01-sethostname:
              command: !Sub
                - /root/bin/sethostname -a ${Param1} -b ${Param2} -H ${GetHostName.HostName}
                  -I 02 -D ${Param3}
                - Param1: !ImportValue
                    Fn::Sub: ${VPCStackName}-ZoneA
                  Param2: !ImportValue
                    Fn::Sub: ${VPCStackName}-ZoneB
                  Param3: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: 'false'
        InstallMongoDBProduct:
          sources:
            /var/tmp: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${MongoDBProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
    Properties:
      ImageId: !If
        - ConfigureAMZN
        - !GetAtt 'GetAmazonLinuxImageId.ImageId'
        - !GetAtt 'GetRHELImageId.ImageId'
      InstanceType: !FindInMap
        - InstanceTypeMap
        - Database
        - !Ref 'EnvironmentType'
      IamInstanceProfile: !Ref 'InstanceProfile'
      KeyName: !If
        - ConfigureKey
        - !Ref 'KeyName'
        - !Ref 'AWS::NoValue'
      NetworkInterfaces:
        - Description: !Sub
            - ${Param1}-${ApplicationName}-NetworkInterface02A-eth0
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
          DeviceIndex: '0'
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-Database1SubnetA
          PrivateIpAddress: !If
            - ConfigureStaticAddress&MultiZone
            - !GetAtt 'AddressCalculatorA.Address5'
            - !Ref 'AWS::NoValue'
          GroupSet:
            - !Ref 'InstanceSecurityGroup'
          AssociatePublicIpAddress: 'false'
          DeleteOnTermination: 'true'
      BlockDeviceMappings:
        - DeviceName: !If
            - ConfigureAMZN
            - /dev/xvdb
            - /dev/sdb
          Ebs:
            VolumeType: gp2
            VolumeSize: '64'
        - DeviceName: !If
            - ConfigureAMZN
            - /dev/xvdc
            - /dev/sdc
          Ebs:
            VolumeType: gp2
            VolumeSize: '16'
        - DeviceName: !If
            - ConfigureAMZN
            - /dev/xvdd
            - /dev/sdd
          Ebs:
            VolumeType: gp2
            VolumeSize: '8'
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-Instance02A
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - Key: HostName
          Value: !Sub '${GetHostName.HostName}02a'
        - !If
          - ConfigureSchedule
          - Key: Schedule
            Value: !Ref 'Schedule'
          - !Ref 'AWS::NoValue'
      UserData: !Base64
        Fn::Sub:
          - |-
            #!/bin/bash -xe
            ${Param1}

            ${Param2}
            ${Param3}
          - Param1: !If
              - ConfigureRHEL
              - |-
                # Add to RHEL what Amazon Linux includes
                # Install EPEL
                yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
                # Install Python Pip and Python Daemon
                yum install -y python-pip python-daemon
                pip install --upgrade pip
                # Install AWS CLI
                pip install awscli
                # Install AWS CLI CloudWatch Logs Plugin
                pip install awscli-cwlogs
                # Download CFN Bootstrap
                cd /opt
                curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
                tar -xvpf aws-cfn-bootstrap-latest.tar.gz
                rm -f aws-cfn-bootstrap-latest.tar.gz
                # Build and Install CFN Bootstrap
                cd aws-cfn-bootstrap-*
                python setup.py build
                python setup.py install
                cd /opt
                rm -Rf aws-cfn-bootstrap-*
                # Create CFN Bootstrap symlinks
                ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup
                chmod 775 /usr/init/redhat/cfn-hup
                mkdir -p /opt/aws/bin
                ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup
                ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init
                ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal
                ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader
                ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata
                ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event
                ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result
              - yum update -y aws-cfn-bootstrap
            Param2: !Sub '/opt/aws/bin/cfn-init --verbose --configsets All --stack
              ${AWS::StackName} --resource Instance02A --region ${AWS::Region}'
            Param3: !Sub '/opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName}
              --resource Instance02A --region ${AWS::Region}'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Condition: ConfigureMultiZone
  AddressCalculatorB:
    Type: Custom::AddressCalculator
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn
      SubnetId: !ImportValue
        Fn::Sub: ${VPCStackName}-Database1SubnetB
    Condition: ConfigureStaticAddress&MultiZone
  Instance01B:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref 'Role'
          buckets:
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ProductsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ConfigurationsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpdateOS
            - !If
              - ConfigureAMZN
              - ConfigureOSUpdates
              - !Ref 'AWS::NoValue'
            - InstallSSMAgent
            - !If
              - ConfigureLogs
              - !If
                - ConfigureAMZN
                - InstallLogs
                - BuildLogs
              - !Ref 'AWS::NoValue'
            - !If
              - ConfigureLogs
              - ConfigureLogs
              - !Ref 'AWS::NoValue'
            - ConfigureCFN
            - ConfigureVolumes
            - ConfigureOS
            - ConfigureHostName
            - !If
              - InstallMongoDBProduct
              - InstallMongoDBProduct
              - !Ref 'AWS::NoValue'
            - !If
              - InstallMongoDBConfiguration
              - InstallMongoDBConfiguration
              - !Ref 'AWS::NoValue'
        UpdateOS:
          commands:
            01_yum_update:
              command: yum update -y
              ignoreErrors: 'false'
        ConfigureOSUpdates:
          packages:
            yum:
              yum-cron: []
          files:
            /etc/yum/yum-cron.conf:
              content: |-
                [commands]
                update_cmd = security
                update_messages = yes
                download_updates = yes
                apply_updates = yes
                random_sleep = 10
              mode: '000644'
              owner: root
              group: root
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallLogs:
          packages:
            yum:
              awslogs: []
        BuildLogs:
          files:
            /etc/awslogs/awscli.conf:
              content: |-
                [plugins]
                cwlogs = cwlogs
                [default]
                region = us-east-1
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: |-
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = /var/log/messages
              mode: '000644'
              owner: root
              group: root
            /root/bin/buildawslogs:
              content: !Sub
                - |-
                  #!/bin/bash
                  zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)
                  region=${!zone::-1}
                  cd /var/tmp
                  curl -O https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
                  ${Param1}
                  # Create symlinks to make setup work like rpm
                  ln -s /var/awslogs /var/lib/awslogs
                  mv /var/awslogs/etc/aws.conf /var/awslogs/etc/aws.conf.bak
                  ln -s /etc/awslogs/awscli.conf /var/awslogs/etc/aws.conf
                  mv /var/awslogs/etc/awslogs.conf /var/awslogs/etc/awslogs.conf.bak
                  ln -s /etc/awslogs/awslogs.conf /var/awslogs/etc/awslogs.conf
                - Param1: !Sub 'python awslogs-agent-setup.py --non-interactive --configfile
                    /etc/awslogs/awslogs.conf --region ${AWS::Region}'
              mode: '000700'
              owner: root
              group: root
          commands:
            01_buildawslogs:
              command: /root/bin/buildawslogs
        ConfigureLogs:
          files:
            /etc/awslogs/awscli.conf:
              content: !Sub
                - |-
                  [default]
                  ${Param1}
                  [plugins]
                  cwlogs = cwlogs
                - Param1: !Sub 'region = ${AWS::Region}'
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub
                - |-
                  [general]
                  state_file = /var/lib/awslogs/agent-state
                  [/var/log/messages]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/messages
                  log_stream_name = MongoDB/{instance_id}/var/log/messages
                  ${Param1}
                  [/var/log/secure]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/secure
                  log_stream_name = MongoDB/{instance_id}/var/log/secure
                  ${Param1}
                  [/var/log/cron]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/cron
                  log_stream_name = MongoDB/{instance_id}/var/log/cron
                  ${Param1}
                  [/var/log/cloud-init.log]
                  datetime_format = %b %d %H:%M:%S
                  file = /var/log/cloud-init.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cloud-init.log
                  ${Param1}
                  [/var/log/cfn-init.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-init.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cfn-init.log
                  ${Param1}
                  [/var/log/cfn-hup.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-hup.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cfn-hup.log
                  ${Param1}
                  [/var/log/cfn-init-cmd.log]
                  datetime_format = %Y-%m-%d %H:%M:%S
                  file = /var/log/cfn-init-cmd.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cfn-init-cmd.log
                  ${Param1}
                  [/var/log/cloud-init-output.log]
                  file = /var/log/cloud-init-output.log
                  log_stream_name = MongoDB/{instance_id}/var/log/cloud-init-output.log
                  ${Param1}
                  [/var/log/dmesg]
                  file = /var/log/dmesg
                  log_stream_name = MongoDB/{instance_id}/var/log/dmesg
                  ${Param1}
                  [/var/log/httpd/access_log]
                  file = /var/log/httpd/access_log
                  log_stream_name = MongoDB/{instance_id}/var/log/httpd/access_log
                  ${Param1}
                  [/var/log/httpd/error_log]
                  file = /var/log/httpd/error_log
                  log_stream_name = MongoDB/{instance_id}/var/log/httpd/error_log
                  ${Param1}
                - Param1: !If
                    - ConfigureLogs
                    - !Sub 'log_group_name = ${LogGroup}'
                    - !Ref 'AWS::NoValue'
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogs:
                enabled: 'true'
                ensureRunning: 'true'
                packages:
                  yum:
                    - awslogs
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub
                - |-
                  [main]
                  ${Param1}
                  ${Param2}
                - Param1: !Sub 'stack=${AWS::StackId}'
                  Param2: !Sub 'region=${AWS::Region}'
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub
                - |-
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.Instance01B.Metadata.AWS::CloudFormation::Init
                  ${Param1}
                - Param1: !Sub 'action=/opt/aws/bin/cfn-init --verbose --configsets
                    All --stack ${AWS::StackName} --resource Instance01B --region
                    ${AWS::Region}'
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        ConfigureVolumes:
          packages:
            yum:
              parted: []
              xfsprogs: []
          files:
            /root/bin/configurevolumes:
              content: |-
                #!/bin/bash
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for Instance to recognize Volume /dev/xvdb"
                attempt=0
                attempts=30
                delay=5
                while ((attempt++ <= attempts)); do
                    if fdisk -l /dev/xvdb &> /dev/null; then
                        break
                    else
                        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdb not yet attached, pausing $delay seconds..."
                        sleep $delay
                    fi
                done
                filesystem_type=$(file -sL /dev/xvdb)
                if [[ $filesystem_type == *"XFS"* ]]; then
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdb formatted with XFS Filesystem"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Existing Volume: using Snapshot, or mapping Volume to replacement Instance"
                else
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdb not formatted"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] New Volume: mounted to initial Instance"
                    mkfs -t xfs /dev/xvdb 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                    xfs_admin -L mongodb_data /dev/xvdb 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                fi
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add Volume /dev/xvdb MountPoint to /etc/fstab"
                sed -i -e "/\/data/d" /etc/fstab
                sed -i -e "/^LABEL=\// aLABEL=mongodb_data /data xfs     defaults,noatime  1   1" /etc/fstab
                sed -i -e "/^UUID=[^ ]* \// aLABEL=mongodb_data /data xfs     defaults,noatime  1   1" /etc/fstab
                mkdir /data 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /data"
                mount /data 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"

                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for Instance to recognize Volume /dev/xvdc"
                attempt=0
                attempts=30
                delay=5
                while ((attempt++ <= attempts)); do
                    if fdisk -l /dev/xvdc &> /dev/null; then
                        break
                    else
                        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdc not yet attached, pausing $delay seconds..."
                        sleep $delay
                    fi
                done
                filesystem_type=$(file -sL /dev/xvdc)
                if [[ $filesystem_type == *"XFS"* ]]; then
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdc formatted with XFS Filesystem"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Existing Volume: using Snapshot, or mapping Volume to replacement Instance"
                else
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdc not formatted"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] New Volume: mounted to initial Instance"
                    mkfs -t xfs /dev/xvdc 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                    xfs_admin -L mongodb_jrnl /dev/xvdc 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                fi
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add Volume /dev/xvdc MountPoint to /etc/fstab"
                sed -i -e "/\/journal/d" /etc/fstab
                sed -i -e "/^LABEL=\// aLABEL=mongodb_jrnl /journal xfs     defaults,noatime  1   1" /etc/fstab
                sed -i -e "/^UUID=[^ ]* \// aLABEL=mongodb_jrnl /journal xfs     defaults,noatime  1   1" /etc/fstab
                mkdir /journal 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /journal"
                mount /journal 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"

                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Wait for Instance to recognize Volume /dev/xvdd"
                attempt=0
                attempts=30
                delay=5
                while ((attempt++ <= attempts)); do
                    if fdisk -l /dev/xvdd &> /dev/null; then
                        break
                    else
                        echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdd not yet attached, pausing $delay seconds..."
                        sleep $delay
                    fi
                done
                filesystem_type=$(file -sL /dev/xvdd)
                if [[ $filesystem_type == *"XFS"* ]]; then
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdd formatted with XFS Filesystem"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Existing Volume: using Snapshot, or mapping Volume to replacement Instance"
                else
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Volume /dev/xvdd not formatted"
                    echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] New Volume: mounted to initial Instance"
                    mkfs -t xfs /dev/xvdd 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                    xfs_admin -L mongodb_log /dev/xvdd 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                fi
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Add Volume /dev/xvdd MountPoint to /etc/fstab"
                sed -i -e "/\/log/d" /etc/fstab
                sed -i -e "/^LABEL=\// aLABEL=mongodb_log /log xfs     defaults,noatime  1   1" /etc/fstab
                sed -i -e "/^UUID=[^ ]* \// aLABEL=mongodb_log /log xfs     defaults,noatime  1   1" /etc/fstab
                mkdir /log 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
                echo "$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] Mounting /log"
                mount /log 2>&1 | sed -e "s/^/$(date +'%Y-%m-%d %H:%M:%S,%3N') [DEBUG] /"
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-volumes:
              command: /root/bin/configurevolumes
              ignoreErrors: 'false'
        ConfigureOS:
          files:
            /etc/profile.d/local.sh:
              content: |-
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureHostName:
          files:
            /root/bin/sethostname:
              content: |-
                #!/bin/bash
                while getopts a:b:H:I:D: arg; do
                    case $arg in
                    a)  zonea="$OPTARG";;
                    b)  zoneb="$OPTARG";;
                    H)  host="$OPTARG";;
                    I)  instance="$OPTARG";;
                    D)  domain="$OPTARG";;
                    esac
                done
                zone=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/placement/availability-zone)
                region=${!zone::-1}
                case $zone in
                  $zonea) hostname=${!host}${!instance}a.$domain;;
                  $zoneb) hostname=${!host}${!instance}b.$domain;;
                esac
                address=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4)
                sed -i -e "/^$address/d" -e "$ a$address $hostname" /etc/hosts
                echo $hostname > /etc/hostname
                hostname $hostname
              mode: '000700'
              owner: root
              group: root
          commands:
            01-sethostname:
              command: !Sub
                - /root/bin/sethostname -a ${Param1} -b ${Param2} -H ${GetHostName.HostName}
                  -I 01 -D ${Param3}
                - Param1: !ImportValue
                    Fn::Sub: ${VPCStackName}-ZoneA
                  Param2: !ImportValue
                    Fn::Sub: ${VPCStackName}-ZoneB
                  Param3: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: 'false'
        InstallMongoDBProduct:
          sources:
            /var/tmp: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${MongoDBProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
    Properties:
      ImageId: !If
        - ConfigureAMZN
        - !GetAtt 'GetAmazonLinuxImageId.ImageId'
        - !GetAtt 'GetRHELImageId.ImageId'
      InstanceType: !FindInMap
        - InstanceTypeMap
        - Database
        - !Ref 'EnvironmentType'
      IamInstanceProfile: !Ref 'InstanceProfile'
      KeyName: !If
        - ConfigureKey
        - !Ref 'KeyName'
        - !Ref 'AWS::NoValue'
      NetworkInterfaces:
        - Description: !Sub
            - ${Param1}-${ApplicationName}-NetworkInterface01B-eth0
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
          DeviceIndex: '0'
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-Database1SubnetB
          PrivateIpAddress: !If
            - ConfigureStaticAddress&MultiZone
            - !GetAtt 'AddressCalculatorB.Address4'
            - !Ref 'AWS::NoValue'
          GroupSet:
            - !Ref 'InstanceSecurityGroup'
          AssociatePublicIpAddress: 'false'
          DeleteOnTermination: 'true'
      BlockDeviceMappings:
        - DeviceName: !If
            - ConfigureAMZN
            - /dev/xvdb
            - /dev/sdb
          Ebs:
            VolumeType: gp2
            VolumeSize: '64'
        - DeviceName: !If
            - ConfigureAMZN
            - /dev/xvdc
            - /dev/sdc
          Ebs:
            VolumeType: gp2
            VolumeSize: '16'
        - DeviceName: !If
            - ConfigureAMZN
            - /dev/xvdd
            - /dev/sdd
          Ebs:
            VolumeType: gp2
            VolumeSize: '8'
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-Instance01B
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - Key: HostName
          Value: !Sub '${GetHostName.HostName}01b'
        - !If
          - ConfigureSchedule
          - Key: Schedule
            Value: !Ref 'Schedule'
          - !Ref 'AWS::NoValue'
      UserData: !Base64
        Fn::Sub:
          - |-
            #!/bin/bash -xe
            ${Param1}

            ${Param2}
            ${Param3}
          - Param1: !If
              - ConfigureRHEL
              - |-
                # Add to RHEL what Amazon Linux includes
                # Install EPEL
                yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
                # Install Python Pip and Python Daemon
                yum install -y python-pip python-daemon
                pip install --upgrade pip
                # Install AWS CLI
                pip install awscli
                # Install AWS CLI CloudWatch Logs Plugin
                pip install awscli-cwlogs
                # Download CFN Bootstrap
                cd /opt
                curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
                tar -xvpf aws-cfn-bootstrap-latest.tar.gz
                rm -f aws-cfn-bootstrap-latest.tar.gz
                # Build and Install CFN Bootstrap
                cd aws-cfn-bootstrap-*
                python setup.py build
                python setup.py install
                cd /opt
                rm -Rf aws-cfn-bootstrap-*
                # Create CFN Bootstrap symlinks
                ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup
                chmod 775 /usr/init/redhat/cfn-hup
                mkdir -p /opt/aws/bin
                ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup
                ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init
                ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal
                ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader
                ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata
                ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event
                ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result
              - yum update -y aws-cfn-bootstrap
            Param2: !Sub '/opt/aws/bin/cfn-init --verbose --configsets All --stack
              ${AWS::StackName} --resource Instance01B --region ${AWS::Region}'
            Param3: !Sub '/opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName}
              --resource Instance01B --region ${AWS::Region}'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Condition: ConfigureMultiZone
Outputs:
  ClientSecurityGroup:
    Description: The Client SecurityGroup
    Value: !Ref 'ClientSecurityGroup'
    Export:
      Name: !Sub '${AWS::StackName}-ClientSecurityGroup'
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref 'InstanceSecurityGroup'
    Export:
      Name: !Sub '${AWS::StackName}-InstanceSecurityGroup'
  Instance01A:
    Description: The Instance01A
    Value: !Ref 'Instance01A'
  HostName01A:
    Description: The HostName01A
    Value: !Sub
      - ${GetHostName.HostName}01a.${Param1}
      - Param1: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  Instance02A:
    Description: The Instance02A
    Value: !Ref 'Instance02A'
    Condition: ConfigureMultiZone
  HostName02A:
    Description: The HostName02A
    Value: !Sub
      - ${GetHostName.HostName}02a.${Param1}
      - Param1: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
    Condition: ConfigureMultiZone
  Instance01B:
    Description: The Instance01B
    Value: !Ref 'Instance01B'
    Condition: ConfigureMultiZone
  HostName01B:
    Description: The HostName01B
    Value: !Sub
      - ${GetHostName.HostName}01b.${Param1}
      - Param1: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
    Condition: ConfigureMultiZone
