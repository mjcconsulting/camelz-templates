AWSTemplateFormatVersion: 2010-09-09
Description: Utility-Duo Template.
  This template implements the Duo Single Sign-On Instances.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - DirectoryStackName
          - VPCStackName
          - AMIFunctionsStackName
          - BucketsStackName
          - TopicsStackName
          - CodesStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
          - EnvironmentZones
          - OSName
      - Label:
          default: Utility Dependencies Configuration
        Parameters:
          - DockerComposeProductKey
          - DuoAccessGatewayProductKey
      - Label:
          default: Utility Configuration
        Parameters:
          - UtilityName
          - UtilityDomain
          - UtilityVersion
          - DuoAdministratorUserName
          - DuoAdministratorPassword
          - DuoLDAPBindCN
          - DuoLDAPBindPassword
          - LogRetention
      - Label:
          default: Security Configuration
        Parameters:
          - UserNetworks
          - UserNetworkDescriptions
          - AdministratorNetworks
          - AdministratorNetworkDescriptions
          - IntegrationNetworks
          - IntegrationNetworkDescriptions
    ParameterLabels:
      DirectoryStackName:
        default: Directory Stack Name
      VPCStackName:
        default: VPC Stack Name
      AMIFunctionsStackName:
        default: AMIFunctions Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      CodesStackName:
        default: Codes Stack Name
      KeyName:
        default: Key Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      OSName:
        default: Operating System Name
      DockerComposeProductKey:
        default: Docker Compose Product S3 Key
      DuoAccessGatewayProductKey:
        default: Duo Access Gateway Product S3 Key
      UtilityName:
        default: Utility Name
      UtilityDomain:
        default: Utility Domain
      UtilityVersion:
        default: Utility Version
      DuoAdministratorUserName:
        default: DUO Administrator UserName
      DuoAdministratorPassword:
        default: DUO Administrator Password
      DuoLDAPBindCN:
        default: DUO LDAP Bind Common Name
      DuoLDAPBindPassword:
        default: DUO LDAP Bind Password
      LogRetention:
        default: Log Retention
      UserNetworks:
        default: User Networks
      UserNetworkDescriptions:
        default: User Network Descriptions
      AdministratorNetworks:
        default: Administrator Networks
      AdministratorNetworkDescriptions:
        default: Administrator Network Descriptions
      IntegrationNetworks:
        default: Integration Networks
      IntegrationNetworkDescriptions:
        default: Integration Network Descriptions
Parameters:
  DirectoryStackName:
    Description: Name of the CloudFormation Stack containing the Directory Management Workstation (DirectoryService) or DomainControllers (ActiveDirectory)
    Type: String
    MaxLength: 64
    Default: Management-DirectoryService
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*-(ActiveDirectory|DirectoryService)$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Management-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing the Codes Resources
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Camelz
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Management
      - Jumpstart
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Management, Jumpstart or Organization.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Build
      - Core
      - Recovery
      - Log
      - Identity
      - Management
      - Organization
    ConstraintDescription: must be Production, Staging, UAT, QA, Testing, Development, Build, Core, Recovery, Log, Identity, Management or Organization.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: micro
    AllowedValues:
      - micro
      - small
      - medium
      - large
      - xlarge
      - 2xlarge
    ConstraintDescription: must be micro, small, medium, large, xlarge or 2xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones to build
    Type: String
    Default: 2
    AllowedValues:
      - 1
      - 2
    ConstraintDescription: must be 1 or 2.
  OSName:
    Description: The Operating System to use for Instances
    Type: String
    Default: Amazon Linux 2
    AllowedValues:
      - Amazon Linux 2
      - Amazon Linux 2.0
      - RHEL 7
      - RHEL 7.5
      - RHEL 7.4
    ConstraintDescription: must be "Amazon Linux 2" (latest), "Amazon Linux 2.0", "RHEL 7" (latest), "RHEL 7.5" or "RHEL 7.4".
  DockerComposeProductKey:
    Description: Optional key of Object within the S3 Bucket containing the Docker Compose Product Installer
    Type: String
    Default: DUO/docker-compose-Linux-x86_64-1.23.1
    AllowedPattern: (^$|^(?:Linux|DUO)\/[-_.a-zA-Z0-9]*$)
    ConstraintDescription: must be a valid installer filename, within the Linux or DUO folders, if specified.
  DuoAccessGatewayProductKey:
    Description: Optional key of Object within the S3 Bucket containing the Duo Access Gateway Product Installer
    Type: String
    Default: DUO/access-gateway-1.5.4.yml
    AllowedPattern: (^$|^(?:Linux|DUO)\/[-_.a-zA-Z0-9]*\.yml$)
    ConstraintDescription: must be a valid installer filename, within the Linux or DUO folders, if specified.
  UtilityName:
    Description: Name of the Utility associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Duo
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  UtilityDomain:
    Description: DNS Name of the Utility associated with the Stack
    Type: String
    MaxLength: 16
    Default: duo
    AllowedPattern: ^[a-z][-a-z0-9]*$
    ConstraintDescription: must begin with a lower case letter and contain only lower case letters, numbers and dashes.
  UtilityVersion:
    Description: Duo Version. Used to select a specific Duo version
    Type: String
    Default: 1.5.4
    AllowedPattern: (^[0-9]*\.[0-9]*\.[0-9]*$|^latest$)
    ConstraintDescription: must be a version of the form x.y.z, or "latest".
  DuoAdministratorUserName:
    Description: Username for the DUO Administrator
    Type: String
    Default: Admin
    MinLength: 3
    MaxLength: 32
    AllowedValues:
      - Admin
    ConstraintDescription: must be Admin.
  DuoVPNAdministratorPassword:
    Description: Optional password for the DUO Administrator User (If unspecified, generate a random password)
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|((?=^.{20,64}$)^[a-z]{1,32}(-[a-z]{1,32}){2,7}$|(?=^.{12,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*$))
    ConstraintDescription: must be 20 to 64 character lowercase hyphenated multiword format,
      or 12 to 32 character random string format with at least one uppercase, lowercase and digit, if specified.
  DuoLDAPBindCN:
    Description: Common Name for the DUO LDAP Bind User
    Type: String
    Default: Duo Access Gateway
    MinLength: 6
    MaxLength: 32
    AllowedValues:
      - Duo Access Gateway
    ConstraintDescription:  must be Duo Access Gateway.
  DuoLDAPBindPassword:
    Description: Optional password for the DUO LDAP Bind User (If unspecified, LDAPBindSecret is not created)
    Type: String
    NoEcho: true
    Default: ''
    AllowedPattern: (^$|((?=^.{20,64}$)^[a-z]{1,32}(-[a-z]{1,32}){2,7}$|(?=^.{12,32}$)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])^.*$))
    ConstraintDescription: must be 20 to 64 character lowercase hyphenated multiword format,
      or 12 to 32 character random string format with at least one uppercase, lowercase and digit, if specified.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.
  UserNetworks:
    Description: Networks that can use the Utility
    Type: String
    Default: 0.0.0.0/0,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  UserNetworkDescriptions:
    Description: Descriptions of networks that can use the Utility
    Type: String
    Default: Anywhere,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each a short text description or '-'.
  AdministratorNetworks:
    Description: Networks that can administer the Utility
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  AdministratorNetworkDescriptions:
    Description: Descriptions of networks that can administer the Utility
    Type: String
    Default: -,-,-,-,-,-,-,-,-,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 16 values, each a short text description or '-'.
  IntegrationNetworks:
    Description: Networks that can integrate with the Utility
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  IntegrationNetworkDescriptions:
    Description: Descriptions of networks that can integrate with the Utility
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each a short text description or '-'.
Mappings:
  RegionNameMap:
    us-east-1:
      Name: Virginia
      Code: ue1
    us-east-2:
      Name: Ohio
      Code: ue2
    us-west-1:
      Name: California
      Code: uw1
    us-west-2:
      Name: Oregon
      Code: uw2
    ap-east-1:
      Name: HongKong
      Code: ae1
    ap-south-1:
      Name: Mumbai
      Code: ad1
    ap-northeast-2:
      Name: Seoul
      Code: an2
    ap-southeast-1:
      Name: Singapore
      Code: as1
    ap-southeast-2:
      Name: Sydney
      Code: as2
    ap-northeast-1:
      Name: Tokyo
      Code: an1
    ca-central-1:
      Name: Canada
      Code: cc1
    eu-central-1:
      Name: Frankfurt
      Code: ec1
    eu-west-1:
      Name: Ireland
      Code: ew1
    eu-west-2:
      Name: London
      Code: ew2
    eu-west-3:
      Name: Paris
      Code: ew3
    eu-north-1:
      Name: Stockholm
      Code: en1
    me-south-1:
      Name: Bahrain
      Code: ms1
    sa-east-1:
      Name: SaoPaulo
      Code: se1
  InstanceTypeMap:
    AccessGateway:
      micro: t3.micro
      small: t3.small
      medium: t3.medium
      large: c5.large
      xlarge: c5.xlarge
Conditions:
  ConfigureAccountEnvironment: !Or [ !Not [ !Equals [ !Ref AccountName, !Ref EnvironmentName ]], !Equals [ !Ref AccountName, Jumpstart ]]
  ConfigureGlobal: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  ConfigureDirectoryIntegration: !Not [ !Equals [ !Ref DirectoryStackName, '' ]]
  ConfigureActiveDirectoryIntegration: !Equals [ !Select [ 1, !Split [ '-', !Ref DirectoryStackName ]], 'ActiveDirectory' ]
  ConfigureKey: !Not [ !Equals [ !Ref KeyName, '' ]]
  ConfigureMultiZone: !Not [ !Equals [ !Ref EnvironmentZones, 1 ]]
  ConfigureAMZN: !Equals [ !Select [ 0, !Split [ ' ', !Ref OSName ]], Amazon ]
  ConfigureRHEL: !Equals [ !Select [ 0, !Split [ ' ', !Ref OSName ]], RHEL ]
  ConfigureAdminPassword: !Not [ !Equals [ !Ref DuoAdministratorPassword, '' ]]
  GenerateAdminPassword: !Not [ !Condition ConfigureAdminPassword ]
  ConfigureLDAPBindPassword: !Not [ !Equals [ !Ref DuoLDAPBindPassword, '' ]]
  InstallDocker: !Not [ !Equals [ !Ref DockerComposeProductKey, '' ]]
  InstallDuoAccessGateway: !Not [ !Equals [ !Ref DuoAccessGatewayProductKey, '' ]]
  ConfigureUserNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureUserNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref UserNetworks ]], '-' ]]
  ConfigureAdministratorNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork8: !Not [ !Equals [ !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork9: !Not [ !Equals [ !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork10: !Not [ !Equals [ !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork11: !Not [ !Equals [ !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork12: !Not [ !Equals [ !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork13: !Not [ !Equals [ !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork14: !Not [ !Equals [ !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork15: !Not [ !Equals [ !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureIntegrationNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork4: !Not [ !Equals [ !Select [ 4, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork5: !Not [ !Equals [ !Select [ 5, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork6: !Not [ !Equals [ !Select [ 6, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
  ConfigureIntegrationNetwork7: !Not [ !Equals [ !Select [ 7, !Split [ ',', !Ref IntegrationNetworks ]], '-' ]]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: GetPasswordSecretPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}-${UtilityName}-AdminPassword-*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${EnvironmentName}-${UtilityName}-LDAPBindPassword-*
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Linux/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Duo/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
        - PolicyName: DownloadConfigurationFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/Linux/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/Duo/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
        - PolicyName: DownloadProductFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ProductsBucket}/Linux/*
                    - ProductsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ProductsBucket
                  - !Sub
                    - arn:aws:s3:::${ProductsBucket}/Duo/*
                    - ProductsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ProductsBucket
        - PolicyName: BackupInS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BackupsBucket}/Duo
                    - BackupsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-BackupsBucket
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BackupsBucket}/Duo/*
                    - BackupsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-BackupsBucket
  LogGroupName:
    Type: Custom::LogGroupName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-LogGroupNameFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
      ApplicationName: !Ref UtilityName
      EnvironmentName: !If [ ConfigureAccountEnvironment, !Ref EnvironmentName, !Ref 'AWS::NoValue' ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetention
  AdminPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}-${UtilityName}-AdminPassword
      Description: !Sub Password for the ${EnvironmentName} Environment ${UtilityName} Utility Admin User (${DuoAdministratorUserName})
      SecretString: !If [ ConfigureAdminPassword, !Ref DuoAdministratorPassword, !Ref 'AWS::NoValue' ]
      GenerateSecretString: !If
        - GenerateAdminPassword
        - PasswordLength: 32
          ExcludePunctuation: true
        - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-AdminPassword
  LDAPBindPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}-${UtilityName}-LDAPBindPassword
      Description: !Sub Password for the ${EnvironmentName} Environment ${UtilityName} Utility LDAP Bind Common Name (${DuoLDAPBindCN})
      SecretString: !Ref DuoLDAPBindPassword
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-LDAPBindPassword
    Condition: ConfigureLDAPBindPassword
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-${UtilityName}-InstanceSecurityGroup
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref UserNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref UserNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 4, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 4, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 5, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 5, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 6, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 6, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 7, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 7, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue

        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork8
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 8, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 8, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork9
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 9, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 9, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork10
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 10, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 10, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork11
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 11, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 11, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork12
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 12, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 12, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork13
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 13, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 13, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork14
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 14, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 14, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: icmp
            FromPort: -1
            ToPort: -1
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (ICMP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTP)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (HTTPS)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: tcp
            FromPort: 8443
            ToPort: 8443
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Admin-HTTPS)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork15
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 15, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 15, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-InstanceSecurityGroup
  AmazonLinux2Image:
    Type: Custom::AmazonLinux2Image
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-AmazonLinux2ImageFunctionArn
      OSName: !Ref OSName
    Condition: ConfigureAMZN
  RHELImageId:
    Type: Custom::RHELImage
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-RHELImageFunctionArn
      OSName: !Ref OSName
    Condition: ConfigureRHEL
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  HostNameA:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref UtilityName
      InstanceNumber: 01
      ZoneCode: a
  InstanceA:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ProductsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpdateOS
            - ConfigureOSUpdates
            - ConfigureOS
            - ConfigureCFN
            - InstallSSMAgent
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
#            - InstallApache
#            - ConfigureSampleWebSite
            - !If [ InstallDocker, InstallDocker, !Ref 'AWS::NoValue' ]
            - !If [ InstallDocker, ConfirmDocker, !Ref 'AWS::NoValue' ]
            - !If [ InstallDuoAccessGateway, InstallDuoAccessGateway, !Ref 'AWS::NoValue' ]
        UpdateOS:
          commands:
            01-yum-update:
              command: yum update -y
              ignoreErrors: false
        ConfigureOSUpdates:
          packages:
            yum:
              yum-cron: []
          files:
            /etc/yum/yum-cron.conf:
              content: |
                [commands]
                update_cmd = security
                update_messages = yes
                download_updates = yes
                apply_updates = yes
                random_sleep = 10
              mode: '000644'
              owner: root
              group: root
        ConfigureOS:
          files:
            /etc/profile.d/local.sh:
              content: |
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.InstanceA.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallCloudWatchAgent:
          sources:
            /var/tmp: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: yum install -y /var/tmp/amazon-cloudwatch-agent.rpm
              ignoreErrors: false
        ConfigureCloudWatchAgent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent" : {
                    "metrics_collection_interval" : 60,
                    "logfile" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                    "debug" : false
                  },
                  "metrics" : {
                    "namespace" : "${SystemName}/${EnvironmentName}-${UtilityName}",
                    "metrics_collected" : {
                      "mem" : {
                        "measurement" : [
                          { "name" : "mem_used_percent", "rename" : "MemoryUsedPercent" }
                        ]
                      },
                      "swap" : {
                        "measurement" : [
                          { "name" : "swap_used_percent", "rename" : "SwapUsedPercent" }
                        ]
                      },
                      "disk" : {
                        "resources" : [
                          "*"
                        ],
                        "measurement" : [
                          { "name" : "used_percent", "rename" : "DiskUsedPercent" }
                        ],
                        "ignore_file_system_types": [
                          "rootfs",
                          "sysfs",
                          "tmpfs",
                          "devtmpfs"
                        ]
                      }
                    },
                    "append_dimensions" : {
                      "InstanceId" : "${!aws:InstanceId}",
                      "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [
                      [ "InstanceId" ],
                      [ "InstanceId", "path" ],
                      [ "AutoScalingGroupName" ]
                    ]
                  },
                  "logs" : {
                    "logs_collected" : {
                      "files" : {
                        "collect_list" : [
                          {
                            "file_path" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log"
                          },
                          {
                            "file_path" : "/var/log/cloud-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/cloud-init.log",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cloud-init-output.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/cloud-init-output.log"
                          },
                          {
                            "file_path" : "/var/log/cfn-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/cfn-init.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-init-cmd.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/cfn-init-cmd.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-hup.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/cfn-hup.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/messages",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/messages",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/secure",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/secure",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cron",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/cron",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/dmesg",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/dmesg"
                          },
                          {
                            "file_path" : "/var/log/yum.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/yum.log"
                          },
                          {
                            "file_path" : "/var/log/httpd/access_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/httpd/access_log"
                          },
                          {
                            "file_path" : "/var/log/httpd/error_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGA/{instance_id}/var/log/httpd/error_log"
                          }
                        ]
                      }
                    }
                  }
                }
              mode: '000644'
              owner: root
              group: root
          # The Cloudwatch Logs Agent is not designed properly as a system service, so we can't use normal commands to start and stop it.
          # It's not clear how this restarts on reboot
          commands:
            01-enable-amazon-cloudwatch-agent:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        ConfigureHostName:
          files:
            /root/bin/configure-hostname:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/configure-hostname
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-hostname:
              command: !Sub
                - /root/bin/configure-hostname -n -h ${HostNameA} -d ${VPCPrivateDomain}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        InstallApache:
          packages:
            yum:
              httpd: []
          commands:
            01-enable-ssi:
              command: sed -i -e 's/\(^    Options Indexes FollowSymLinks$\)/\1 Includes\n    XBitHack on/' /etc/httpd/conf/httpd.conf
              ignoreErrors: false
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/httpd/conf/httpd.conf
        ConfigureSampleWebSite:
          files:
            /var/www/html/index.html:
              content: !Sub |
                <html>
                <head>
                <title>${UtilityName} Test Page</title>
                </head>
                <body>
                <h1>${UtilityName} (${UtilityVersion})</h1>

                <p>This page displays data obtained from the meta-data service via SSI.</p>

                <ul>
                  <li>ami-id: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/ami-id" --></li>
                  <li>instance-id: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/instance-id" --></li>
                  <li>instance-type: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/instance-type" --></li>
                  <li>local-hostname: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/local-hostname" --></li>
                  <li>local-ipv4: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/local-ipv4" --></li>
                  <li>public-hostname: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/public-hostname" --></li>
                  <li>public-ipv4: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/public-ipv4" --></li>
                </ul>

                <p>If you do not see the output values on this page, insure you have added &quot;XBitHack on&quot; to the
                Apache main or vhost configuration file and restarted Apache</p>
                </body>
              mode: '000755'
              owner: root
              group: root
        InstallDocker:
          files:
            # Obtain and store this file via:
            # wget -O- "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-Linux-x86_64" > ./docker-compose-Linux-x86_64-1.23.1
            /usr/local/bin/docker-compose:
              source: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${DockerComposeProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-install-docker:
              command: amazon-linux-extras install docker
              ignoreErrors: false
            02-configure-ec2-user:
              command: usermod -a -G docker ec2-user
              ignoreErrors: false
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
        ConfirmDocker:
          commands:
            01-confirm-docker-version:
              command: docker --version
              ignoreErrors: false
            02-confirm-docker-ps:
              command: docker ps
              ignoreErrors: false
            03-confirm-docker-compose-version:
              command: docker-compose --version
              ignoreErrors: false
        InstallDuoAccessGateway:
          files:
            /var/tmp/access-gateway.yml:
              source: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${DuoAccessGatewayProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-install-access-gateway:
              command: !Sub docker-compose -p access-gateway -f access-gateway.yml up -d
              cwd: /var/tmp
              ignoreErrors: false
            02-confirm-access-gateway:
              command: docker ps
              ignoreErrors: false
    Properties:
      ImageId: !If [ ConfigureAMZN, !Ref AmazonLinux2Image, !Ref RHELImage ]
      InstanceType: !FindInMap [ InstanceTypeMap, AccessGateway, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ ConfigureKey, !Ref KeyName, !Ref 'AWS::NoValue' ]
      Monitoring: true
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-${UtilityName}-NetworkInterface-eth0
          DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-WebSubnetA
          GroupSet:
            - !Ref InstanceSecurityGroup
          DeleteOnTermination: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 16
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-InstanceA
#        - Key: HostName
#          Value: !Ref HostNameA
      UserData:
        Fn::Base64: !If
          - ConfigureAMZN
          - !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log | logger -t user-data) 2>&1

            yum update -y aws-cfn-bootstrap

            /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
          - !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log | logger -t user-data) 2>&1

            # Add to RHEL what Amazon Linux includes
            # Install EPEL
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            # Install Python Pip and Python Daemon
            yum install -y python-pip python-daemon
            pip install --upgrade pip
            # Install AWS CLI
            pip install awscli
            # Download CFN Bootstrap
            cd /opt
            curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            tar -xvpf aws-cfn-bootstrap-latest.tar.gz
            rm -f aws-cfn-bootstrap-latest.tar.gz
            # Build and Install CFN Bootstrap
            cd aws-cfn-bootstrap-*
            python setup.py build
            python setup.py install
            cd /opt
            rm -Rf aws-cfn-bootstrap-*
            # Create CFN Bootstrap symlinks
            ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup
            chmod 775 /usr/init/redhat/cfn-hup
            mkdir -p /opt/aws/bin
            ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup
            ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init
            ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal
            ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader
            ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata
            ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event
            ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result

            /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: !If [ ConfigureAMZN, PT5M, PT15M ]
  # Do not use the HostName Tag on any Instances along with explicitly defined HostNameRecordSet Resource as you see here
  # If a HostName tag exists, the PrivateRecordSet Function will attempt to manage Private DNS Records, resulting in a conflict
  PrivateHostNameRecordSetA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Host Name of the ${UtilityName} Instance A
      Name: !Sub
        - ${HostNameA}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt InstanceA.PrivateIp
  PrivateServiceNameRecordSetA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Service Name of the ${UtilityName} Service A
      Name: !Sub
        - ${UtilityDomain}a.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !Sub
          - ${HostNameA}.${VPCPrivateDomain}
          - VPCPrivateDomain: !ImportValue
              Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  EIPA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPAssociationA:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIPA.AllocationId
      InstanceId: !Ref InstanceA
  PublicHostNameRecordSetA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS Host Name of the ${UtilityName} Instance A
      Name: !Sub
        - ${HostNameA}.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref EIPA
  PublicServiceNameRecordSetA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS Service Name of the ${UtilityName} Service A
      Name: !Sub
        - ${UtilityDomain}a.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !Sub
          - ${HostNameA}.${VPCPublicDomain}
          - VPCPublicDomain: !ImportValue
              Fn::Sub: ${VPCStackName}-VPCPublicDomain
  HostNameB:
    Type: Custom::HostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-HostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !Ref EnvironmentName
      ApplicationName: !Ref UtilityName
      InstanceNumber: 01
      ZoneCode: b
    Condition: ConfigureMultiZone
  InstanceB:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ProductsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - UpdateOS
            - ConfigureOSUpdates
            - ConfigureOS
            - ConfigureCFN
            - InstallSSMAgent
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
            - InstallApache
            - ConfigureSampleWebSite
            - InstallDuoAccessGateway
        UpdateOS:
          commands:
            01-yum-update:
              command: yum update -y
              ignoreErrors: false
        ConfigureOSUpdates:
          packages:
            yum:
              yum-cron: []
          files:
            /etc/yum/yum-cron.conf:
              content: |
                [commands]
                update_cmd = security
                update_messages = yes
                download_updates = yes
                apply_updates = yes
                random_sleep = 10
              mode: '000644'
              owner: root
              group: root
        ConfigureOS:
          files:
            /etc/profile.d/local.sh:
              content: |
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.InstanceB.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallCloudWatchAgent:
          sources:
            /var/tmp: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: yum install -y /var/tmp/amazon-cloudwatch-agent.rpm
              ignoreErrors: false
        ConfigureCloudWatchAgent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub |
                {
                  "agent" : {
                    "metrics_collection_interval" : 60,
                    "logfile" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                    "debug" : false
                  },
                  "metrics" : {
                    "namespace" : "${SystemName}/${EnvironmentName}-${UtilityName}",
                    "metrics_collected" : {
                      "mem" : {
                        "measurement" : [
                          { "name" : "mem_used_percent", "rename" : "MemoryUsedPercent" }
                        ]
                      },
                      "swap" : {
                        "measurement" : [
                          { "name" : "swap_used_percent", "rename" : "SwapUsedPercent" }
                        ]
                      },
                      "disk" : {
                        "resources" : [
                          "*"
                        ],
                        "measurement" : [
                          { "name" : "used_percent", "rename" : "DiskUsedPercent" }
                        ],
                        "ignore_file_system_types": [
                          "rootfs",
                          "sysfs",
                          "tmpfs",
                          "devtmpfs"
                        ]
                      }
                    },
                    "append_dimensions" : {
                      "InstanceId" : "${!aws:InstanceId}",
                      "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                    },
                    "aggregation_dimensions" : [
                      [ "InstanceId" ],
                      [ "InstanceId", "path" ],
                      [ "AutoScalingGroupName" ]
                    ]
                  },
                  "logs" : {
                    "logs_collected" : {
                      "files" : {
                        "collect_list" : [
                          {
                            "file_path" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log"
                          },
                          {
                            "file_path" : "/var/log/cloud-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/cloud-init.log",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cloud-init-output.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/cloud-init-output.log"
                          },
                          {
                            "file_path" : "/var/log/cfn-init.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/cfn-init.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-init-cmd.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/cfn-init-cmd.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cfn-hup.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/cfn-hup.log",
                            "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/messages",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/messages",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/secure",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/secure",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/cron",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/cron",
                            "timestamp_format" : "%b %d %H:%M:%S"
                          },
                          {
                            "file_path" : "/var/log/dmesg",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/dmesg"
                          },
                          {
                            "file_path" : "/var/log/yum.log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/yum.log"
                          },
                          {
                            "file_path" : "/var/log/httpd/access_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/httpd/access_log"
                          },
                          {
                            "file_path" : "/var/log/httpd/error_log",
                            "log_group_name" : "${LogGroup}",
                            "log_stream_name" : "DAGB/{instance_id}/var/log/httpd/error_log"
                          }
                        ]
                      }
                    }
                  }
                }
              mode: '000644'
              owner: root
              group: root
          # The Cloudwatch Logs Agent is not designed properly as a system service, so we can't use normal commands to start and stop it.
          # It's not clear how this restarts on reboot
          commands:
            01-enable-amazon-cloudwatch-agent:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        ConfigureHostName:
          files:
            /root/bin/configure-hostname:
              source: !Sub
                - https://${ScriptsBucket}.${s3}.amazonaws.com/Linux/configure-hostname
                - ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-hostname:
              command: !Sub
                - /root/bin/configure-hostname -n -h ${HostNameB} -d ${VPCPrivateDomain}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        InstallApache:
          packages:
            yum:
              httpd: []
          commands:
            01-enable-ssi:
              command: sed -i -e 's/\(^    Options Indexes FollowSymLinks$\)/\1 Includes\n    XBitHack on/' /etc/httpd/conf/httpd.conf
              ignoreErrors: false
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/httpd/conf/httpd.conf
        ConfigureSampleWebSite:
          files:
            /var/www/html/index.html:
              content: !Sub |
                <html>
                <head>
                <title>${UtilityName} Test Page</title>
                </head>
                <body>
                <h1>${UtilityName} (${UtilityVersion})</h1>

                <p>This page displays data obtained from the meta-data service via SSI.</p>

                <ul>
                  <li>ami-id: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/ami-id" --></li>
                  <li>instance-id: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/instance-id" --></li>
                  <li>instance-type: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/instance-type" --></li>
                  <li>local-hostname: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/local-hostname" --></li>
                  <li>local-ipv4: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/local-ipv4" --></li>
                  <li>public-hostname: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/public-hostname" --></li>
                  <li>public-ipv4: <!--#exec cmd="curl http://169.254.169.254/latest/meta-data/public-ipv4" --></li>
                </ul>

                <p>If you do not see the output values on this page, insure you have added &quot;XBitHack on&quot; to the
                Apache main or vhost configuration file and restarted Apache</p>
                </body>
              mode: '000755'
              owner: root
              group: root
        InstallDuoAccessGateway:
          commands:
            01-dummy:
              command: echo hello > /root/hello.txt
              ignoreErrors: false
    Properties:
      ImageId: !If [ ConfigureAMZN, !Ref AmazonLinux2Image, !Ref RHELImage ]
      InstanceType: !FindInMap [ InstanceTypeMap, AccessGateway, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ ConfigureKey, !Ref KeyName, !Ref 'AWS::NoValue' ]
      Monitoring: true
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-${UtilityName}-NetworkInterface-eth0
          DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-WebSubnetB
          GroupSet:
            - !Ref InstanceSecurityGroup
          DeleteOnTermination: true
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: 16
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-${UtilityName}-InstanceB
#        - Key: HostName
#          Value: !Ref HostNameB
      UserData:
        Fn::Base64: !If
          - ConfigureAMZN
          - !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log | logger -t user-data) 2>&1

            yum update -y aws-cfn-bootstrap

            /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
          - !Sub |
            #!/bin/bash -xe
            exec > >(tee /var/log/user-data.log | logger -t user-data) 2>&1

            # Add to RHEL what Amazon Linux includes
            # Install EPEL
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            # Install Python Pip and Python Daemon
            yum install -y python-pip python-daemon
            pip install --upgrade pip
            # Install AWS CLI
            pip install awscli
            # Download CFN Bootstrap
            cd /opt
            curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            tar -xvpf aws-cfn-bootstrap-latest.tar.gz
            rm -f aws-cfn-bootstrap-latest.tar.gz
            # Build and Install CFN Bootstrap
            cd aws-cfn-bootstrap-*
            python setup.py build
            python setup.py install
            cd /opt
            rm -Rf aws-cfn-bootstrap-*
            # Create CFN Bootstrap symlinks
            ln -s /usr/init/redhat/cfn-hup /etc/init.d/cfn-hup
            chmod 775 /usr/init/redhat/cfn-hup
            mkdir -p /opt/aws/bin
            ln -s /usr/bin/cfn-hup /opt/aws/bin/cfn-hup
            ln -s /usr/bin/cfn-init /opt/aws/bin/cfn-init
            ln -s /usr/bin/cfn-signal /opt/aws/bin/cfn-signal
            ln -s /usr/bin/cfn-elect-cmd-leader /opt/aws/bin/cfn-elect-cmd-leader
            ln -s /usr/bin/cfn-get-metadata /opt/aws/bin/cfn-get-metadata
            ln -s /usr/bin/cfn-send-cmd-event /opt/aws/bin/cfn-send-cmd-event
            ln -s /usr/bin/cfn-send-cmd-result /opt/aws/bin/cfn-send-cmd-result

            /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
            /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: !If [ ConfigureAMZN, PT5M, PT15M ]
    Condition: ConfigureMultiZone
  # Do not use the HostName Tag on any Instances along with explicitly defined HostNameRecordSet Resource as you see here
  # If a HostName tag exists, the PrivateRecordSet Function will attempt to manage Private DNS Records, resulting in a conflict
  PrivateHostNameRecordSetB:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Host Name of the ${UtilityName} Instance B
      Name: !Sub
        - ${HostNameB}.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt InstanceB.PrivateIp
    Condition: ConfigureMultiZone
  PrivateServiceNameRecordSetB:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS Service Name of the ${UtilityName} Service B
      Name: !Sub
        - ${UtilityDomain}b.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !Sub
          - ${HostNameB}.${VPCPrivateDomain}
          - VPCPrivateDomain: !ImportValue
              Fn::Sub: ${VPCStackName}-VPCPrivateDomain
    Condition: ConfigureMultiZone
  EIPB:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    Condition: ConfigureMultiZone
  EIPAssociationB:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt EIPB.AllocationId
      InstanceId: !Ref InstanceB
    Condition: ConfigureMultiZone
  PublicHostNameRecordSetB:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS Host Name of the ${UtilityName} Instance B
      Name: !Sub
        - ${HostNameB}.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref EIPB
    Condition: ConfigureMultiZone
  PublicServiceNameRecordSetB:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS Service Name of the ${UtilityName} Service B
      Name: !Sub
        - ${UtilityDomain}b.${VPCPublicDomain}.
        - VPCPublicDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !Sub
          - ${HostNameB}.${VPCPublicDomain}
          - VPCPublicDomain: !ImportValue
              Fn::Sub: ${VPCStackName}-VPCPublicDomain
    Condition: ConfigureMultiZone
Outputs:
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
  EIPA:
    Description: The Public Address of Duo Instance A
    Value: !Ref EIPA
  PublicHostNameA:
    Description: The Public DNS Host Name of Duo Instance A
    Value: !Sub
      - ${HostNameA}.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
  PublicServiceNameA:
    Description: The Public DNS Service Name of Duo Service A
    Value: !Sub
      - ${UtilityDomain}a.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
  PublicWebsiteURLA:
    Description: The Public Website URL A
    Value: !Sub
      - http://${UtilityDomain}a.${VPCPublicDomain}/
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
  EIPB:
    Description: The Public Address of Duo Instance B
    Value: !Ref EIPB
    Condition: ConfigureMultiZone
  PublicHostNameB:
    Description: The Public DNS Host Name of Duo Instance B
    Value: !Sub
      - ${HostNameB}.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
    Condition: ConfigureMultiZone
  PublicServiceNameB:
    Description: The Public DNS Service Name of Duo Service B
    Value: !Sub
      - ${UtilityDomain}b.${VPCPublicDomain}
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
    Condition: ConfigureMultiZone
  PublicWebsiteURLB:
    Description: The Public Website URL B
    Value: !Sub
      - http://${UtilityDomain}b.${VPCPublicDomain}/
      - VPCPublicDomain: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
    Condition: ConfigureMultiZone
