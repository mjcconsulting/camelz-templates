AWSTemplateFormatVersion: 2010-09-09
Description: Environment-VPC Template.
  This creates an Environment VPC. Multiple Environment VPCs can co-exist. The VPC is always Multi-Zone. It can optionally be Multi-NAT Gateway. It can optionally have a VPN Gateway.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - PublicHostedZoneStackName
          - TagFunctionsStackName
          - AMIFunctionsStackName
          - CodesStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyPairName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - AccountName
          - EnvironmentName
          - EnvironmentType
          - EnvironmentZones
      - Label:
          default: VPC Configuration
        Parameters:
          - Network
          - PrivateDomain
          - DirectoryDomain
          - DirectoryNetBIOSDomain
          - UsePrivateHostedZone
          - UseNatGateway
          - UseVPNGateway
          - LogRetention
    ParameterLabels:
      PublicHostedZoneStackName:
        default: PublicHostedZone Stack Name
      TagFunctionsStackName:
        default: TagFunctions Stack Name
      AMIFunctionsStackName:
        default: AMIFunctions Stack Name
      CodesStackName:
        default: Codes Stack Name
      KeyPairName:
        default: KeyPair Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      AccountName:
        default: Account Name
      EnvironmentName:
        default: Environment Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      Network:
        default: Network
      PrivateDomain:
        default: Private Domain
      DirectoryDomain:
        default: Directory Domain
      DirectoryNetBIOSDomain:
        default: Directory NetBIOS Domain
      UsePrivateHostedZone:
        default: Use a Private HostedZone
      UseNatGateway:
        default: Use NAT Gateway
      UseVPNGateway:
        default: Use a VPN Gateway
      LogRetention:
        default: Log Retention
Parameters:
  PublicHostedZoneStackName:
    Description: Name of the CloudFormation Stack containing the Public HostedZone
    Type: String
    MaxLength: 64
    Default: Production-PublicHostedZone
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TagFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Tag Functions
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: TagFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  AMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the AMI Functions
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: AMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  CodesStackName:
    Description: Name of the CloudFormation Stack containing Codes Resources
    Type: String
    MinLength: 4
    MaxLength: 64
    Default: Codes
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyPairName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Camelz
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  AccountName:
    Description: Name of the Account associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Recovery
      - Staging
      - UAT
      - QA
      - Testing
      - Development
      - Jumpstart
    ConstraintDescription: must be Production, Recovery, Staging, UAT, QA, Testing, Development or Jumpstart.
  EnvironmentName:
    Description: Name of the Environment associated with the Stack
    Type: String
    Default: Production
    AllowedValues:
      - Production
      - Recovery
      - Staging
      - UAT
      - QA
      - Testing
      - Development
    ConstraintDescription: must be Production, Recovery, Staging, UAT, QA, Testing or Development.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: medium
    AllowedValues:
      - small
      - medium
      - large
      - xlarge
      - 2xlarge
    ConstraintDescription: must be small, medium, large, xlarge or 2xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones with independent NAT Gateways/Instances
    Type: String
    Default: 1
    AllowedValues:
      - 1
      - 3
    ConstraintDescription: must be 1 or 3.
  Network:
    Description: VPC Network
    Type: String
    Default: 10.160.0.0/21
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[8-9]|2[0-2]))$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/18-22.
  PrivateDomain:
    Description: Private Domain associated with the Stack
    Type: String
    MinLength: 7
    MaxLength: 64
    Default: us-west-2.camelz.io
    AllowedPattern: ^((?!-)[a-z0-9-]{1,63}(?<!-)\.)+[a-z]{2,10}$
    ConstraintDescription: must be a valid DNS domain name.
  DirectoryDomain:
    Description: Directory Domain associated with the Stack
    Type: String
    MinLength: 7
    MaxLength: 64
    Default: ad.camelz.io
    AllowedPattern: ^((?!-)[a-z0-9-]{1,63}(?<!-)\.)+[a-z]{2,10}$
    ConstraintDescription: must be a valid DNS domain name.
  DirectoryNetBIOSDomain:
    Description: Directory NetBIOS Domain associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 15
    Default: camelz
    AllowedPattern: (^$|^[a-zA-Z0-9]{2,15}$)
    ConstraintDescription: must be a valid NetBIOS domain name.
  UsePrivateHostedZone:
    Description: Create PrivateHostedZone, and associate with VPC via DHCPOptions
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  UseNatGateway:
    Description: Use a NAT Gateway instead of a NAT Instance
    Type: String
    Default: true
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  UseVPNGateway:
    Description: Create VPNGateway
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    ConstraintDescription: must be either true or false.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: must be 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.
Mappings:
  StandardSubnetCalculationMap:
    CidrBits:
      small: 4
      medium: 5
      large: 6
      xlarge: 7
      2xlarge: 8
  UtilitySubnetCalculationMap:
    CidrCount:
      small: 16
      medium: 32
      large: 64
      xlarge: 128
      2xlarge: 256
    AZAOffset:
      small: 3
      medium: 7
      large: 15
      xlarge: 31
      2xlarge: 63
    AZBOffset:
      small: 7
      medium: 15
      large: 31
      xlarge: 63
      2xlarge: 127
    AZCOffset:
      small: 11
      medium: 23
      large: 47
      xlarge: 95
      2xlarge: 191
  InstanceTypeMap:
    NAT:
      small: t3a.nano
      medium: t3a.micro
      large: t3a.small
      xlarge: c5.large
      2xlarge: c5.xlarge
Conditions:
  ConfigureAccountEnvironment: !Or [ !Not [ !Equals [ !Ref AccountName, !Ref EnvironmentName ]], !Equals [ !Ref AccountName, Jumpstart ]]
  ConfigurePublicHostedZone: !Not [ !Equals [ !Ref PublicHostedZoneStackName, '' ]]
  ConfigureKeyPair: !Not [ !Equals [ !Ref KeyPairName, '' ]]
  ConfigureMultiZone: !Not [ !Equals [ !Ref EnvironmentZones, 1 ]]
  ConfigurePrivateDomain: !Not [ !Equals [ !Ref PrivateDomain, '' ]]
  ConfigureDirectoryDomain: !Not [ !Equals [ !Ref DirectoryDomain, '' ]]
  ConfigureDirectoryNetBIOSDomain: !Not [ !Equals [ !Ref DirectoryNetBIOSDomain, '' ]]
  ConfigurePrivateHostedZone: !Equals [ !Ref UsePrivateHostedZone, true ]
  ConfigureNatGateway: !Equals [ !Ref UseNatGateway, true ]
  ConfigureNatGateway&MultiZone: !And [ !Condition ConfigureNatGateway, !Condition ConfigureMultiZone ]
  ConfigureNatInstance: !Equals [ !Ref UseNatGateway, false ]
  ConfigureNatInstance&MultiZone: !And [ !Condition ConfigureNatInstance, !Condition ConfigureMultiZone ]
  ConfigureVPNGateway: !Equals [ !Ref UseVPNGateway, true ]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: FlowLogPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  LogGroupName:
    Type: Custom::LogGroupName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CodesStackName}-LogGroupNameFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
      ApplicationName: FlowLog
      EnvironmentName: !If [ ConfigureAccountEnvironment, !Ref EnvironmentName, !Ref 'AWS::NoValue' ]
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: !Ref LogRetention
  AmazonNATImage:
    Type: Custom::AmazonNATImage
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${AMIFunctionsStackName}-AmazonNATImageFunctionArn
      Region: !Ref AWS::Region
    Condition: ConfigureNatInstance
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !Ref Network
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC
  VpcDefaultResourceTagger:
    Type: Custom::VpcDefaultResourceTagger
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${TagFunctionsStackName}-VpcDefaultResourceTaggerFunctionArn
      VpcId: !Ref VPC
  FlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL
      LogDestinationType: cloud-watch-logs
      LogGroupName: !Ref LogGroupName
      DeliverLogsPermissionArn: !GetAtt Role.Arn
    DeletionPolicy: Retain
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PrivateHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: !Sub Private Zone for ${PrivateDomain}
      Name: !Sub ${PrivateDomain}.
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Ref AWS::Region
      HostedZoneTags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateHostedZone
    Condition: ConfigurePrivateHostedZone
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Ref PrivateDomain
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateDHCPOptions
    Condition: ConfigurePrivateHostedZone
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
    Condition: ConfigurePrivateHostedZone
  VPNGateway:
    Type: AWS::EC2::VPNGateway
    Properties:
      Type: ipsec.1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPNGateway
    Condition: ConfigureVPNGateway
  VPNGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      VpnGatewayId: !Ref VPNGateway
    Condition: ConfigureVPNGateway
  VPNGatewayRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Properties:
      VpnGatewayId: !Ref VPNGateway
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTableA
        - !Ref PrivateRouteTableB
    DependsOn: VPNGatewayAttachment
    Condition: ConfigureVPNGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 16, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetB
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 32, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnetC
  Public1SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public1SubnetA
  Public1SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 17, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public1SubnetB
  Public1SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 33, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public1SubnetC
  WebSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebSubnetA
  WebSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 18, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebSubnetB
  WebSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 34, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebSubnetC
  Web1SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Web1SubnetA
  Web1SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 19, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Web1SubnetB
  Web1SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 35, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Web1SubnetC
  ApplicationSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ApplicationSubnetA
  ApplicationSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 20, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ApplicationSubnetB
  ApplicationSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 36, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ApplicationSubnetC
  Application1SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Application1SubnetA
  Application1SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 21, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Application1SubnetB
  Application1SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 37, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Application1SubnetC
  Application2SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 6, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Application2SubnetA
  Application2SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 22, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Application2SubnetB
  Application2SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 38, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Application2SubnetC
  Application3SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 7, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Application3SubnetA
  Application3SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 23, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Application3SubnetB
  Application3SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 39, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Application3SubnetC
  DatabaseSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 8, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DatabaseSubnetA
  DatabaseSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 24, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DatabaseSubnetB
  DatabaseSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 40, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DatabaseSubnetC
  Database1SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 9, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Database1SubnetA
  Database1SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 25, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Database1SubnetB
  Database1SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 41, !Cidr [ !GetAtt VPC.CidrBlock, 64, !FindInMap [ StandardSubnetCalculationMap, CidrBits, !Ref EnvironmentType ]]]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Database1SubnetC
  EndpointSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZAOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 2, 5 ] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EndpointSubnetA
  EndpointSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZBOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 2, 5 ] ]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EndpointSubnetB
  EndpointSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZCOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 2, 5 ] ]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EndpointSubnetC
  DirectorySubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZAOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DirectorySubnetA
  DirectorySubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZBOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DirectorySubnetB
  DirectorySubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZCOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-DirectorySubnetC
  GatewaySubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZAOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-GatewaySubnetA
  GatewaySubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZBOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-GatewaySubnetB
  GatewaySubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, !Cidr [ !Select [ !FindInMap [ UtilitySubnetCalculationMap, AZCOffset, !Ref EnvironmentType ], !Cidr [ !GetAtt VPC.CidrBlock, !FindInMap [ UtilitySubnetCalculationMap, CidrCount, !Ref EnvironmentType ], 6 ] ], 4, 4 ] ]
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-GatewaySubnetC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable
  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  Public1SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public1SubnetA
      RouteTableId: !Ref PublicRouteTable
  Public1SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public1SubnetB
      RouteTableId: !Ref PublicRouteTable
  Public1SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Public1SubnetC
      RouteTableId: !Ref PublicRouteTable
  WebSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetA
      RouteTableId: !Ref PublicRouteTable
  WebSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetB
      RouteTableId: !Ref PublicRouteTable
  WebSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref WebSubnetC
      RouteTableId: !Ref PublicRouteTable
  Web1SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Web1SubnetA
      RouteTableId: !Ref PublicRouteTable
  Web1SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Web1SubnetB
      RouteTableId: !Ref PublicRouteTable
  Web1SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Web1SubnetC
      RouteTableId: !Ref PublicRouteTable
  NatAEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureNatGateway
  NatBEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureNatGateway&MultiZone
  NatCEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureNatGateway&MultiZone
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatAEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-GatewayA
    Condition: ConfigureNatGateway
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatBEIP.AllocationId
      SubnetId: !Ref PublicSubnetB
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-GatewayB
    Condition: ConfigureNatGateway&MultiZone
  NatGatewayC:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatCEIP.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-GatewayC
    Condition: ConfigureNatGateway&MultiZone
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub ${EnvironmentName}-NAT-InstanceSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref Network
          Description: VPC (All)
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-InstanceSecurityGroup
        - Key: Utility
          Value: NAT
    Condition: ConfigureNatInstance
  NatInstanceA:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonNATImage
      InstanceType: !FindInMap [ InstanceTypeMap, NAT, !Ref EnvironmentType ]
      KeyName: !If [ ConfigureKeyPair, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-NAT-NetworkInterfaceA-eth0
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetA
          GroupSet:
            - !Ref InstanceSecurityGroup
          DeleteOnTermination: true
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-InstanceA
        - Key: Utility
          Value: NAT
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureNatInstance
  NatInstanceB:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonNATImage
      InstanceType: !FindInMap [ InstanceTypeMap, NAT, !Ref EnvironmentType ]
      KeyName: !If [ ConfigureKeyPair, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-NAT-NetworkInterfaceB-eth0
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetB
          GroupSet:
            - !Ref InstanceSecurityGroup
          DeleteOnTermination: true
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-InstanceB
        - Key: Utility
          Value: NAT
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureNatInstance&MultiZone
  NatInstanceC:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmazonNATImage
      InstanceType: !FindInMap [ InstanceTypeMap, NAT, !Ref EnvironmentType ]
      KeyName: !If [ ConfigureKeyPair, !Ref KeyPairName, !Ref 'AWS::NoValue' ]
      NetworkInterfaces:
        - Description: !Sub ${EnvironmentName}-NAT-NetworkInterfaceC-eth0
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnetC
          GroupSet:
            - !Ref InstanceSecurityGroup
          DeleteOnTermination: true
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NAT-InstanceC
        - Key: Utility
          Value: NAT
    DependsOn: InternetGatewayAttachment
    Condition: ConfigureNatInstance&MultiZone
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTableA
  PrivateDefaultRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [ ConfigureNatGateway, !Ref NatGatewayA, !Ref 'AWS::NoValue' ]
      InstanceId: !If [ ConfigureNatInstance, !Ref NatInstanceA, !Ref 'AWS::NoValue' ]
  ApplicationSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref ApplicationSubnetA
  Application1SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref Application1SubnetA
  Application2SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref Application2SubnetA
  Application3SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref Application3SubnetA
  DatabaseSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref DatabaseSubnetA
  Database1SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref Database1SubnetA
  EndpointSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref EndpointSubnetA
  DirectorySubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref DirectorySubnetA
  GatewaySubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref GatewaySubnetA
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTableB
  PrivateDefaultRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [ ConfigureNatGateway, !If [ ConfigureMultiZone, !Ref NatGatewayB, !Ref NatGatewayA ], !Ref 'AWS::NoValue' ]
      InstanceId: !If [ ConfigureNatInstance, !If [ ConfigureMultiZone, !Ref NatInstanceB, !Ref NatInstanceA ], !Ref 'AWS::NoValue' ]
  ApplicationSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref ApplicationSubnetB
  Application1SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref Application1SubnetB
  Application2SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref Application2SubnetB
  Application3SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref Application3SubnetB
  DatabaseSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref DatabaseSubnetB
  Database1SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref Database1SubnetB
  EndpointSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref EndpointSubnetB
  DirectorySubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref DirectorySubnetB
  GatewaySubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref GatewaySubnetB
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTableC
  PrivateDefaultRouteC:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !If [ ConfigureNatGateway, !If [ ConfigureMultiZone, !Ref NatGatewayC, !Ref NatGatewayA ], !Ref 'AWS::NoValue' ]
      InstanceId: !If [ ConfigureNatInstance, !If [ ConfigureMultiZone, !Ref NatInstanceC, !Ref NatInstanceA ], !Ref 'AWS::NoValue' ]
  ApplicationSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref ApplicationSubnetC
  Application1SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref Application1SubnetC
  Application2SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref Application2SubnetC
  Application3SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref Application3SubnetC
  DatabaseSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref DatabaseSubnetC
  Database1SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref Database1SubnetC
  EndpointSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref EndpointSubnetC
  DirectorySubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref DirectorySubnetC
  GatewaySubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref GatewaySubnetC
Outputs:
  VPC:
    Description: The VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  VPCName:
    Description: The VPC Name
    Value: !Ref EnvironmentName
    Export:
      Name: !Sub ${AWS::StackName}-VPCName
  VPCNetwork:
    Description: The VPC Network
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub ${AWS::StackName}-VPCNetwork
  VPCPublicDomain:
    Description: The VPC Public Domain
    Value: !ImportValue
      Fn::Sub: ${PublicHostedZoneStackName}-PublicDomain
    Export:
      Name: !Sub ${AWS::StackName}-VPCPublicDomain
    Condition: ConfigurePublicHostedZone
  VPCPrivateDomain:
    Description: The VPC Private Domain
    Value: !Ref PrivateDomain
    Export:
      Name: !Sub ${AWS::StackName}-VPCPrivateDomain
    Condition: ConfigurePrivateDomain
  VPCDirectoryDomain:
    Description: The VPC Directory Domain
    Value: !Ref DirectoryDomain
    Export:
      Name: !Sub ${AWS::StackName}-VPCDirectoryDomain
    Condition: ConfigureDirectoryDomain
  VPCDirectoryNetBIOSDomain:
    Description: The VPC Directory NetBIOS Domain
    Value: !Ref DirectoryNetBIOSDomain
    Export:
      Name: !Sub ${AWS::StackName}-VPCDirectoryNetBIOSDomain
    Condition: ConfigureDirectoryNetBIOSDomain
  PublicHostedZone:
    Description: The Public HostedZone
    Value: !ImportValue
      Fn::Sub: ${PublicHostedZoneStackName}-PublicHostedZone
    Export:
      Name: !Sub ${AWS::StackName}-PublicHostedZone
    Condition: ConfigurePublicHostedZone
  PrivateHostedZone:
    Description: The Private HostedZone
    Value: !Ref PrivateHostedZone
    Export:
      Name: !Sub ${AWS::StackName}-PrivateHostedZone
    Condition: ConfigurePrivateHostedZone
  VPNGateway:
    Description: The VPNGateway
    Value: !Ref VPNGateway
    Export:
      Name: !Sub ${AWS::StackName}-VPNGateway
    Condition: ConfigureVPNGateway
  PublicSubnetA:
    Description: The Public Subnet in Availability Zone A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA
  PublicSubnetB:
    Description: The Public Subnet in Availability Zone B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB
  PublicSubnetC:
    Description: The Public Subnet in Availability Zone C
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetC
  Public1SubnetA:
    Description: The Public1 Subnet in Availability Zone A
    Value: !Ref Public1SubnetA
    Export:
      Name: !Sub ${AWS::StackName}-Public1SubnetA
  Public1SubnetB:
    Description: The Public1 Subnet in Availability Zone B
    Value: !Ref Public1SubnetB
    Export:
      Name: !Sub ${AWS::StackName}-Public1SubnetB
  Public1SubnetC:
    Description: The Public1 Subnet in Availability Zone C
    Value: !Ref Public1SubnetC
    Export:
      Name: !Sub ${AWS::StackName}-Public1SubnetC
  WebSubnetA:
    Description: The Web Subnet in Availability Zone A
    Value: !Ref WebSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnetA
  WebSubnetB:
    Description: The Web Subnet in Availability Zone B
    Value: !Ref WebSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnetB
  WebSubnetC:
    Description: The Web Subnet in Availability Zone C
    Value: !Ref WebSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnetC
  Web1SubnetA:
    Description: The Web1 Subnet in Availability Zone A
    Value: !Ref Web1SubnetA
    Export:
      Name: !Sub ${AWS::StackName}-Web1SubnetA
  Web1SubnetB:
    Description: The Web1 Subnet in Availability Zone B
    Value: !Ref Web1SubnetB
    Export:
      Name: !Sub ${AWS::StackName}-Web1SubnetB
  Web1SubnetC:
    Description: The Web1 Subnet in Availability Zone C
    Value: !Ref Web1SubnetC
    Export:
      Name: !Sub ${AWS::StackName}-Web1SubnetC
  ApplicationSubnetA:
    Description: The Application Subnet in Availability Zone A
    Value: !Ref ApplicationSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnetA
  ApplicationSubnetB:
    Description: The Application Subnet in Availability Zone B
    Value: !Ref ApplicationSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnetB
  ApplicationSubnetC:
    Description: The Application Subnet in Availability Zone C
    Value: !Ref ApplicationSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationSubnetC
  Application1SubnetA:
    Description: The Application1 Subnet in Availability Zone A
    Value: !Ref Application1SubnetA
    Export:
      Name: !Sub ${AWS::StackName}-Application1SubnetA
  Application1SubnetB:
    Description: The Application1 Subnet in Availability Zone B
    Value: !Ref Application1SubnetB
    Export:
      Name: !Sub ${AWS::StackName}-Application1SubnetB
  Application1SubnetC:
    Description: The Application1 Subnet in Availability Zone C
    Value: !Ref Application1SubnetC
    Export:
      Name: !Sub ${AWS::StackName}-Application1SubnetC
  Application2SubnetA:
    Description: The Application2 Subnet in Availability Zone A
    Value: !Ref Application2SubnetA
    Export:
      Name: !Sub ${AWS::StackName}-Application2SubnetA
  Application2SubnetB:
    Description: The Application2 Subnet in Availability Zone B
    Value: !Ref Application2SubnetB
    Export:
      Name: !Sub ${AWS::StackName}-Application2SubnetB
  Application2SubnetC:
    Description: The Application2 Subnet in Availability Zone C
    Value: !Ref Application2SubnetC
    Export:
      Name: !Sub ${AWS::StackName}-Application2SubnetC
  Application3SubnetA:
    Description: The Application3 Subnet in Availability Zone A
    Value: !Ref Application3SubnetA
    Export:
      Name: !Sub ${AWS::StackName}-Application3SubnetA
  Application3SubnetB:
    Description: The Application3 Subnet in Availability Zone B
    Value: !Ref Application3SubnetB
    Export:
      Name: !Sub ${AWS::StackName}-Application3SubnetB
  Application3SubnetC:
    Description: The Application3 Subnet in Availability Zone C
    Value: !Ref Application3SubnetC
    Export:
      Name: !Sub ${AWS::StackName}-Application3SubnetC
  DatabaseSubnetA:
    Description: The Database Subnet in Availability Zone A
    Value: !Ref DatabaseSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetA
  DatabaseSubnetB:
    Description: The Database Subnet in Availability Zone B
    Value: !Ref DatabaseSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetB
  DatabaseSubnetC:
    Description: The Database Subnet in Availability Zone C
    Value: !Ref DatabaseSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSubnetC
  Database1SubnetA:
    Description: The Database1 Subnet in Availability Zone A
    Value: !Ref Database1SubnetA
    Export:
      Name: !Sub ${AWS::StackName}-Database1SubnetA
  Database1SubnetB:
    Description: The Database1 Subnet in Availability Zone B
    Value: !Ref Database1SubnetB
    Export:
      Name: !Sub ${AWS::StackName}-Database1SubnetB
  Database1SubnetC:
    Description: The Database1 Subnet in Availability Zone C
    Value: !Ref Database1SubnetC
    Export:
      Name: !Sub ${AWS::StackName}-Database1SubnetC
  EndpointSubnetA:
    Description: The Endpoint Subnet in Availability Zone A
    Value: !Ref EndpointSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-EndpointSubnetA
  EndpointSubnetB:
    Description: The Endpoint Subnet in Availability Zone B
    Value: !Ref EndpointSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-EndpointSubnetB
  EndpointSubnetC:
    Description: The Endpoint Subnet in Availability Zone C
    Value: !Ref EndpointSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-EndpointSubnetC
  DirectorySubnetA:
    Description: The Directory Subnet in Availability Zone A
    Value: !Ref DirectorySubnetA
    Export:
      Name: !Sub ${AWS::StackName}-DirectorySubnetA
  DirectorySubnetB:
    Description: The Directory Subnet in Availability Zone B
    Value: !Ref DirectorySubnetB
    Export:
      Name: !Sub ${AWS::StackName}-DirectorySubnetB
  DirectorySubnetC:
    Description: The Directory Subnet in Availability Zone C
    Value: !Ref DirectorySubnetC
    Export:
      Name: !Sub ${AWS::StackName}-DirectorySubnetC
  GatewaySubnetA:
    Description: The Gateway Subnet in Availability Zone A
    Value: !Ref GatewaySubnetA
    Export:
      Name: !Sub ${AWS::StackName}-GatewaySubnetA
  GatewaySubnetB:
    Description: The Gateway Subnet in Availability Zone B
    Value: !Ref GatewaySubnetB
    Export:
      Name: !Sub ${AWS::StackName}-GatewaySubnetB
  GatewaySubnetC:
    Description: The Gateway Subnet in Availability Zone C
    Value: !Ref GatewaySubnetC
    Export:
      Name: !Sub ${AWS::StackName}-GatewaySubnetC
  PublicRouteTable:
    Description: The Public RouteTable
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-PublicRouteTable
  PrivateRouteTableA:
    Description: The Private RouteTable in Availability Zone A
    Value: !Ref PrivateRouteTableA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTableA
  PrivateRouteTableB:
    Description: The Private RouteTable in Availability Zone B
    Value: !Ref PrivateRouteTableB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTableB
  PrivateRouteTableC:
    Description: The Private RouteTable in Availability Zone C
    Value: !Ref PrivateRouteTableC
    Export:
      Name: !Sub ${AWS::StackName}-PrivateRouteTableC
