AWSTemplateFormatVersion: 2010-09-09
Description: Example-Engine-Web Template.
  This template creates the Example Engine Application Web Tier, from a prior project.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - EngineMonitoringStackName
          - FederatedSecuritySecurityServerStackName
          - MongoDBStackName
          - RabbitMQStackName
          - OctopusDeployStackName
          - VPNStackName
          - ActiveDirectoryStackName
          - VPCStackName
          - CustomIdentifierFunctionsStackName
          - StandardCIDRFunctionsStackName
          - StandardAMIFunctionsStackName
          - StandardBucketsStackName
          - StandardTopicsStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - EnvironmentType
          - EnvironmentZones
          - OSName
          - OSDate
      - Label:
          default: Application Dependencies Configuration
        Parameters:
          - AtomProductKey
          - ProductKey
      - Label:
          default: Application Configuration
        Parameters:
          - ApplicationKey
          - ApplicationName
          - ApplicationDomain
          - ApplicationVersion
          - ComponentName
          - UseStaticAddress
          - LogRetention
          - Schedule
      - Label:
          default: Security Configuration
        Parameters:
          - UserNetworks
          - AdministratorNetworks
          - IntegrationNetworks
          - DomainAdminUser
          - DomainAdminPassword
    ParameterLabels:
      EngineMonitoringStackName:
        default: Engine Monitoring Stack Name
      FederatedSecuritySecurityServerStackName:
        default: FederatedSecurity SecurityServer Stack Name
      MongoDBStackName:
        default: MongoDB Stack Name
      RabbitMQStackName:
        default: RabbitMQ Stack Name
      OctopusDeployStackName:
        default: Octopus Deploy Stack Name
      VPNStackName:
        default: VPN Stack Name
      ActiveDirectoryStackName:
        default: Active Directory Stack Name
      VPCStackName:
        default: VPC Stack Name
      CustomIdentifierFunctionsStackName:
        default: CustomIdentifierFunctions Stack Name
      StandardCIDRFunctionsStackName:
        default: StandardCIDRFunctions Stack Name
      StandardAMIFunctionsStackName:
        default: StandardAMIFunctions Stack Name
      StandardBucketsStackName:
        default: StandardBuckets Stack Name
      StandardTopicsStackName:
        default: StandardTopics Stack Name
      KeyName:
        default: Key Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      OSName:
        default: Operating System Name
      OSDate:
        default: Operating System Date
      AtomProductKey:
        default: Atom Product S3 Key
      ProductKey:
        default: Product S3 Key
      ApplicationKey:
        default: Application S3 Key
      ApplicationName:
        default: Application Name
      ApplicationDomain:
        default: Application Domain Name
      ApplicationVersion:
        default: Application Version
      ComponentName:
        default: Component Name
      UseStaticAddress:
        default: Use Static Address
      LogRetention:
        default: Log Retention
      Schedule:
        default: Schedule
      UserNetworks:
        default: User Networks
      AdministratorNetworks:
        default: Administrator Networks
      IntegrationNetworks:
        default: Integration Networks
      DomainAdminUser:
        default: DomainAdmin User
      DomainAdminPassword:
        default: DomainAdmin Password
Parameters:
  EngineMonitoringStackName:
    Description: Name of the CloudFormation Stack containing the Engine Monitoring Instances
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-Engine-Monitoring
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  FederatedSecuritySecurityServerStackName:
    Description: Name of the CloudFormation Stack containing the FederatedSecurity SecurityServer Instances
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  MongoDBStackName:
    Description: Name of the CloudFormation Stack containing the MongoDB Instances
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-MongoDB
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  RabbitMQStackName:
    Description: Name of the CloudFormation Stack containing the RabbitMQ Instances
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-RabbitMQ
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  OctopusDeployStackName:
    Description: Name of the CloudFormation Stack containing the Octopus Deploy Instances
    Type: String
    MaxLength: 64
    Default: Production-Octopus-Deploy
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPNStackName:
    Description: Name of the CloudFormation Stack containing the VPN Instances
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: Production-OpenVPN
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  ActiveDirectoryStackName:
    Description: Name of the CloudFormation Stack containing the ActiveDirectory DomainControllers
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: Production-ActiveDirectory
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 6
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  CustomIdentifierFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Custom Identifier
      Functions
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: CustomIdentifierFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  StandardCIDRFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Standard CIDR Functions
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: StandardCIDRFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  StandardAMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Standard AMI Functions
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: StandardAMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  StandardBucketsStackName:
    Description: Name of the CloudFormation Stack containing Standard Buckets
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: StandardBuckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  StandardTopicsStackName:
    Description: Name of the CloudFormation Stack containing Standard Topics
    Type: String
    MinLength: 8
    MaxLength: 64
    Default: StandardTopics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Camelz
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Prototype
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options
      in Mappings
    Type: String
    Default: small
    AllowedValues:
      - small
      - medium
      - large
      - xlarge
    ConstraintDescription: must be small, medium, large or xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones to build
    Type: String
    Default: '2'
    AllowedValues:
      - '1'
      - '2'
    ConstraintDescription: must be 1 or 2.
  OSName:
    Description: The Operating System to use for Instances
    Type: String
    Default: Windows Server 2012 R2
    AllowedValues:
      - Windows Server 2012 R2
      - Windows Server 2016
    ConstraintDescription: must be "Windows Server 2012 R2" or "Windows Server 2016".
  OSDate:
    Description: Optional Operating System Date, specify to select a specific publication
      date for the Image
    Type: String
    Default: '20180509'
    AllowedPattern: (^$|^20(1[7-9]|[2-9][0-9])(0[1-9]|1[0-2])(0[1-9]|[1-2][0-9]|3[0-1])$)
    ConstraintDescription: Must be a valid date in YYYYMMDD format.
  AtomProductKey:
    Description: Optional key of Object within the S3 Bucket containing the Atom installer
    Type: String
    Default: ''
    AllowedPattern: (^$|^(?:Windows|Atom|Engine)\/[-_.a-zA-Z0-9]*\.exe$)
    ConstraintDescription: must be a valid installer filename, within the Windows, Atom or Engine folders, if specified.
  ProductKey:
    Description: Optional key of Object within the S3 Bucket containing the installer
    Type: String
    Default: ''
    AllowedPattern: (^$|^(?:Windows|Engine)\/[-_.a-zA-Z0-9]*\.exe$)
    ConstraintDescription: must be a valid installer filename, within the Windows or Engine folders, if specified.
  ApplicationKey:
    Description: Optional key of Object within the S3 Bucket containing the application
    Type: String
    Default: ''
    AllowedPattern: (^$|^(?:Windows|Engine)\/[-_.a-zA-Z0-9]*\.exe$)
    ConstraintDescription: must be a valid installer filename, within the Windows or Engine folders, if specified.
  ApplicationName:
    Description: Name of the Application associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Engine
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters.
  ApplicationDomain:
    Description: DNS Name of the Application associated with the Stack
    Type: String
    MaxLength: 16
    Default: ''
    AllowedPattern: (^$|^[a-z][-a-z0-9]*$)
    ConstraintDescription: must begin with a lower case letter and contain only lower
      case letters, numbers and dashes.
  ApplicationVersion:
    Description: Version of the Application
    Type: String
    MinLength: 5
    MaxLength: 32
    Default: 1.0.0
    AllowedPattern: ^[0-9]*.[0-9]*.[0-9]*(-[a-zA-Z0-9][-a-zA-Z0-9]*)?$
    ConstraintDescription: must follow semantic versioning conventions.
  ComponentName:
    Description: Name of the Application Component associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Web
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric
      characters.
  UseStaticAddress:
    Description: Create and attach a separate Static Address
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    ConstraintDescription: must be either true or false.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events (0 disables use of
      CloudWatch Logs)
    Type: Number
    Default: 14
    AllowedValues:
      - 0
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: 'must be: 0 (disabled), 1, 3, 5, 7, 14, 30, 60, 90, 120,
      150, 180, 365, 400, 545, 731, 1827 or 3653.'
  Schedule:
    Description: Schedule Tag Value (blank disables Scheduler)
    Type: String
    Default: ''
    AllowedPattern: (^$|^([0-9]|1[0-9]|2[0-3]):[0-5][0-9]-([0-9]|1[0-9]|2[0-3]):[0-5][0-9]T?$)
    ConstraintDescription: See Scheduler Lambda Function description for Tag format.
  UserNetworks:
    Description: Networks that can use the Application
    Type: String
    Default: NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP
      CIDR range of the form x.x.x.x/x or the word NONE.
  AdministratorNetworks:
    Description: Networks that can administer the Application
    Type: String
    Default: NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP
      CIDR range of the form x.x.x.x/x or the word NONE.
  IntegrationNetworks:
    Description: Networks that can integrate with the Application
    Type: String
    Default: NONE,NONE,NONE,NONE,NONE,NONE,NONE,NONE
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP
      CIDR range of the form x.x.x.x/x or the word NONE.
  DomainAdminUser:
    Description: User name for the account that will be added as Domain Administrator.
      This is separate from the default "Administrator" account
    Type: String
    MinLength: '5'
    MaxLength: '25'
    Default: StackAdmin
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must be alphanumeric.
  DomainAdminPassword:
    Description: Password for the domain admin user. Must be at least 8 characters
      containing letters, numbers and symbols
    Type: String
    NoEcho: 'true'
    MinLength: '8'
    MaxLength: '32'
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    ConstraintDescription: must be a valid password.
Mappings:
  ImageIdMap:
    AMI:
      '20180509': Windows_Server-2012-R2_RTM-English-64Bit-Base-2018.05.09
      '20180613': Windows_Server-2012-R2_RTM-English-64Bit-Base-2018.06.13
    us-east-1:
      '20180509': ami-2a9a1655
      '20180613': ami-b8f3b5c7
    us-east-2:
      '20180509': ami-ee112c8b
      '20180613': ami-da003ebf
    us-west-1:
      '20180509': ami-63253b03
      '20180613': ami-832acee0
    us-west-2:
      '20180509': ami-bbd6a7c3
      '20180613': ami-aeffbcd6
    ca-central-1:
      '20180509': ami-4a97172e
      '20180613': ami-800685e4
    eu-west-1:
      '20180509': ami-4390a43a
      '20180613': ami-3e7a7647
    eu-central-1:
      '20180509': ami-3c0f22d7
      '20180613': ami-e8093a03
    eu-west-2:
      '20180509': ami-e940a28e
      '20180613': ami-629a7405
    eu-west-3:
      '20180509': ami-0c803171
      '20180613': ami-c911a0b4
    ap-southeast-1:
      '20180509': ami-14a89d68
      '20180613': ami-de2a2da2
    ap-southeast-2:
      '20180509': ami-c971a6ab
      '20180613': ami-75f32c17
    ap-northeast-2:
      '20180509': ami-4a1eb724
      '20180613': ami-2968c247
    ap-northeast-1:
      '20180509': ami-9be803e4
      '20180613': ami-4e0cc331
    ap-south-1:
      '20180509': ami-2289aa4d
      '20180613': ami-e795bd88
    sa-east-1:
      '20180509': ami-b9df82d5
      '20180613': ami-5c6e3530
  InstanceTypeMap:
    Web:
      small: t2.large
      medium: c4.2xlarge
      large: c4.4xlarge
      xlarge: c4.8xlarge
Conditions:
  ConfigureGlobalS3: !Equals
    - !Ref 'AWS::Region'
    - us-east-1
  GetImageID: !Equals
    - !Ref 'OSDate'
    - ''
  ConfigureMultiZone: !Not
    - !Equals
      - !Ref 'EnvironmentZones'
      - '1'
  InstallAtom: !Not [ !Equals [ !Ref AtomProductKey, '' ]]
  InstallProduct: !Not [ !Equals [ !Ref ProductKey, '' ]]
  InstallApplication: !Not [ !Equals [ !Ref ApplicationKey, '' ]]
  ConfigureDomainName: !Not
    - !Equals
      - !Ref 'ApplicationDomain'
      - ''
  ConfigureStaticAddress: !Equals
    - !Ref 'UseStaticAddress'
    - 'true'
  ConfigureStaticAddress&MultiZone: !And
    - !Condition 'ConfigureStaticAddress'
    - !Condition 'ConfigureMultiZone'
  ConfigureLogs: !Not
    - !Equals
      - !Ref 'LogRetention'
      - '0'
  ConfigureSchedule: !Not
    - !Equals
      - !Ref 'Schedule'
      - ''
  ConfigureFederatedSecurityIntegration: !Not
    - !Equals
      - !Ref 'FederatedSecuritySecurityServerStackName'
      - ''
  ConfigureOctopusIntegration: !Not
    - !Equals
      - !Ref 'OctopusDeployStackName'
      - ''
  ConfigureUserNetwork0: !Not
    - !Equals
      - !Select
        - '0'
        - !Split
          - ','
          - !Ref 'UserNetworks'
      - NONE
  ConfigureUserNetwork1: !Not
    - !Equals
      - !Select
        - '1'
        - !Split
          - ','
          - !Ref 'UserNetworks'
      - NONE
  ConfigureUserNetwork2: !Not
    - !Equals
      - !Select
        - '2'
        - !Split
          - ','
          - !Ref 'UserNetworks'
      - NONE
  ConfigureUserNetwork3: !Not
    - !Equals
      - !Select
        - '3'
        - !Split
          - ','
          - !Ref 'UserNetworks'
      - NONE
  ConfigureUserNetwork4: !Not
    - !Equals
      - !Select
        - '4'
        - !Split
          - ','
          - !Ref 'UserNetworks'
      - NONE
  ConfigureUserNetwork5: !Not
    - !Equals
      - !Select
        - '5'
        - !Split
          - ','
          - !Ref 'UserNetworks'
      - NONE
  ConfigureUserNetwork6: !Not
    - !Equals
      - !Select
        - '6'
        - !Split
          - ','
          - !Ref 'UserNetworks'
      - NONE
  ConfigureUserNetwork7: !Not
    - !Equals
      - !Select
        - '7'
        - !Split
          - ','
          - !Ref 'UserNetworks'
      - NONE
  ConfigureAdministratorNetwork0: !Not
    - !Equals
      - !Select
        - '0'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork1: !Not
    - !Equals
      - !Select
        - '1'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork2: !Not
    - !Equals
      - !Select
        - '2'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork3: !Not
    - !Equals
      - !Select
        - '3'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork4: !Not
    - !Equals
      - !Select
        - '4'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork5: !Not
    - !Equals
      - !Select
        - '5'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork6: !Not
    - !Equals
      - !Select
        - '6'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureAdministratorNetwork7: !Not
    - !Equals
      - !Select
        - '7'
        - !Split
          - ','
          - !Ref 'AdministratorNetworks'
      - NONE
  ConfigureIntegrationNetwork0: !Not
    - !Equals
      - !Select
        - '0'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork1: !Not
    - !Equals
      - !Select
        - '1'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork2: !Not
    - !Equals
      - !Select
        - '2'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork3: !Not
    - !Equals
      - !Select
        - '3'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork4: !Not
    - !Equals
      - !Select
        - '4'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork5: !Not
    - !Equals
      - !Select
        - '5'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork6: !Not
    - !Equals
      - !Select
        - '6'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
  ConfigureIntegrationNetwork7: !Not
    - !Equals
      - !Select
        - '7'
        - !Split
          - ','
          - !Ref 'IntegrationNetworks'
      - NONE
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
  DownloadScriptFromS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DownloadScriptFromS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub
                - arn:aws:s3:::${Param1}/${SharedScriptFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ScriptsBucket
              - !Sub
                - arn:aws:s3:::${Param1}/${ScriptFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ScriptsBucket
      Roles:
        - !Ref 'Role'
  DownloadProductFromS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DownloadProductFromS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub
                - arn:aws:s3:::${Param1}/${SharedProductFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ProductsBucket
              - !Sub
                - arn:aws:s3:::${Param1}/${ProductFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ProductsBucket
      Roles:
        - !Ref 'Role'
  DownloadConfigurationFromS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DownloadConfigurationFromS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub
                - arn:aws:s3:::${Param1}/${SharedConfigurationFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ConfigurationsBucket
              - !Sub
                - arn:aws:s3:::${Param1}/${ConfigurationFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ConfigurationsBucket
      Roles:
        - !Ref 'Role'
  DownloadApplicationFromS3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DownloadApplicationFromS3Policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource:
              - !Sub
                - arn:aws:s3:::${Param1}/${SharedApplicationFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ApplicationsBucket
              - !Sub
                - arn:aws:s3:::${Param1}/${ApplicationFolder}/*
                - Param1: !ImportValue
                    Fn::Sub: ${StandardBucketsStackName}-ApplicationsBucket
      Roles:
        - !Ref 'Role'
  LogMonitoringPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LogMonitoringPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
      Roles:
        - !Ref 'Role'
    Condition: ConfigureLogs
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref 'LogRetention'
    Condition: ConfigureLogs
  ClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${Param1}-${ApplicationName}-${ComponentName}-ClientSecurityGroup
        - Param1: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-${ComponentName}-ClientSecurityGroup
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${Param1}-${ApplicationName}-${ComponentName}-LoadBalancerSecurityGroup
        - Param1: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: '0'
          ToPort: '0'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '3'
          ToPort: '3'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '8'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '11'
          ToPort: '11'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref 'ClientSecurityGroup'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref 'ClientSecurityGroup'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '0'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork0
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '0'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '1'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork1
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '1'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '2'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork2
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '2'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '3'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork3
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '3'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '4'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork4
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '4'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '5'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork5
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '5'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '6'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork6
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '6'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '7'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureUserNetwork7
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '7'
              - !Split
                - ','
                - !Ref 'UserNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork0
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '0'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork0
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '0'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork1
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '1'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork1
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '1'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork2
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '2'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork2
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '2'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork3
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '3'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork3
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '3'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork4
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '4'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork4
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '4'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork5
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '5'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork5
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '5'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork6
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '6'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork6
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '6'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork7
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '7'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureIntegrationNetwork7
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '7'
              - !Split
                - ','
                - !Ref 'IntegrationNetworks'
          - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-${ComponentName}-LoadBalancerSecurityGroup
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${Param1}-${ApplicationName}-${ComponentName}-InstanceSecurityGroup
        - Param1: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: '0'
          ToPort: '0'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '3'
          ToPort: '3'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '8'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '11'
          ToPort: '11'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          SourceSecurityGroupId: !ImportValue
            Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '0'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '0'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: '3389'
            ToPort: '3389'
            CidrIp: !Select
              - '0'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '1'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '1'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: '3389'
            ToPort: '3389'
            CidrIp: !Select
              - '1'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '2'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '2'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: '3389'
            ToPort: '3389'
            CidrIp: !Select
              - '2'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '3'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '3'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: '3389'
            ToPort: '3389'
            CidrIp: !Select
              - '3'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '4'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '4'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork4
          - IpProtocol: tcp
            FromPort: '3389'
            ToPort: '3389'
            CidrIp: !Select
              - '4'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '5'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '5'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork5
          - IpProtocol: tcp
            FromPort: '3389'
            ToPort: '3389'
            CidrIp: !Select
              - '5'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '6'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '6'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork6
          - IpProtocol: tcp
            FromPort: '3389'
            ToPort: '3389'
            CidrIp: !Select
              - '6'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: '80'
            ToPort: '80'
            CidrIp: !Select
              - '7'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: '443'
            ToPort: '443'
            CidrIp: !Select
              - '7'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureAdministratorNetwork7
          - IpProtocol: tcp
            FromPort: '3389'
            ToPort: '3389'
            CidrIp: !Select
              - '7'
              - !Split
                - ','
                - !Ref 'AdministratorNetworks'
          - !Ref 'AWS::NoValue'
        - !If
          - ConfigureOctopusIntegration
          - IpProtocol: tcp
            FromPort: '10933'
            ToPort: '10933'
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${OctopusDeployStackName}-InstanceSecurityGroup
          - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-${ComponentName}-InstanceSecurityGroup
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue
          Fn::Sub: ${VPCStackName}-PublicSubnetA
        - !If
          - ConfigureMultiZone
          - !ImportValue
            Fn::Sub: ${VPCStackName}-PublicSubnetB
          - !Ref 'AWS::NoValue'
      Instances:
        - !Ref 'Instance01A'
        - !If
          - ConfigureMultiZone
          - !Ref 'Instance01B'
          - !Ref 'AWS::NoValue'
      SecurityGroups:
        - !Ref 'LoadBalancerSecurityGroup'
      CrossZone: 'true'
      LBCookieStickinessPolicy:
        - PolicyName: CookieBasedPolicy
          CookieExpirationPeriod: '30'
      Listeners:
        - Protocol: HTTP
          LoadBalancerPort: '80'
          InstancePort: '80'
          PolicyNames:
            - CookieBasedPolicy
      HealthCheck:
        Target: HTTP:80/index.htm
        HealthyThreshold: '2'
        UnhealthyThreshold: '2'
        Interval: '15'
        Timeout: '5'
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-${ComponentName}-LoadBalancer
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  GetHostName:
    Type: Custom::GetHostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${CustomIdentifierFunctionsStackName}-GetHostNameFunctionArn
      CompanyName: !Ref 'CompanyName'
      LocationName: !Ref 'AWS::Region'
      EnvironmentName: !ImportValue
        Fn::Sub: ${VPCStackName}-VPCName
      ApplicationName: !Ref 'ApplicationName'
      ComponentName: !Ref 'ComponentName'
  GetWindowsImageId:
    Type: Custom::GetWindowsImageId
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${StandardAMIFunctionsStackName}-GetWindowsImageIdFunctionArn
      Region: !Ref 'AWS::Region'
      OSName: !Ref 'OSName'
      OSDate: !Ref 'OSDate'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'Role'
  AddressCalculatorA:
    Type: Custom::AddressCalculator
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn
      SubnetId: !ImportValue
        Fn::Sub: ${VPCStackName}-WebSubnetA
    Condition: ConfigureStaticAddress
  Instance01A:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref 'Role'
          buckets:
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ProductsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ApplicationsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - !If
              - ConfigureLogs
              - ConfigureLogs
              - !Ref 'AWS::NoValue'
            - ConfigureCFN
            - ConfigureOS
            - ConfigureHostName
            - JoinDomain
            - InstallWebServer
            - !If [ InstallAtom, InstallAtom, !Ref 'AWS::NoValue' ]
            - !If [ InstallProduct, InstallProduct, !Ref 'AWS::NoValue' ]
            - !If [ InstallApplication, InstallApplication, ConfigureApplication ]
            - SignalCFN
        ConfigureLogs:
          files:
            C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json:
              content: !Sub
                - '{  "IsEnabled" : true,  "EngineConfiguration" : {    "PollInterval"
                  : "00:00:10",    "Components" : [{      "Id" : "ApplicationEventLog",      "FullName"
                  : "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "LogName" : "Application",        "Levels" : "7"      }    },    {      "Id"
                  : "SystemEventLog",      "FullName" : "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "LogName" : "System",        "Levels" : "7"      }    },    {      "Id"
                  : "SecurityEventLog",      "FullName" : "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "LogName" : "Security",        "Levels" : "7"      }    },    {      "Id"
                  : "EC2ConfigLog",      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "LogDirectoryPath": "C:\\Program Files\\Amazon\\Ec2ConfigService\\Logs",        "TimestampFormat":
                  "yyyy-MM-ddTHH:mm:ss.fffZ:",        "Encoding": "ASCII",        "Filter":
                  "EC2ConfigLog.txt",        "CultureName": "en-US",        "TimeZoneKind":
                  "UTC"      }    },    {      "Id": "CfnInitLog",      "FullName":
                  "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "LogDirectoryPath": "C:\\cfn\\log",        "TimestampFormat":
                  "yyyy-MM-dd HH:mm:ss,fff",        "Encoding": "ASCII",        "Filter":
                  "cfn-init.log",        "CultureName": "en-US",        "TimeZoneKind":
                  "Local"      }    },    {      "Id" : "IISLogs",      "FullName"
                  : "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "LogDirectoryPath" : "C:\\inetpub\\logs\\LogFiles\\W3SVC1",        "TimestampFormat"
                  : "yyyy-MM-dd HH:mm:ss",        "Encoding" : "UTF-8",        "Filter"
                  : "",        "CultureName" : "en-US",        "TimeZoneKind" : "UTC",        "LineCount"
                  : "3"      }    },    {      "Id" : "MemoryPerformanceCounter",      "FullName"
                  : "AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "CategoryName" : "Memory",        "CounterName" : "Available
                  MBytes",        "InstanceName" : "",        "MetricName" : "Memory",        "Unit"
                  : "Megabytes",        "DimensionName" : "",        "DimensionValue"
                  : ""      }    },    {      "Id": "CloudWatchApplicationEventLog",      "FullName":
                  "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/ApplicationEventLog"      }    },    {      "Id":
                  "CloudWatchSystemEventLog",      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/SystemEventLog"      }    },    {      "Id":
                  "CloudWatchSecurityEventLog",      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/SecurityEventLog"      }    },    {      "Id":
                  "CloudWatchEC2ConfigLog",      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/EC2ConfigLog"      }    },    {      "Id": "CloudWatchCfnInitLog",      "FullName":
                  "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/CfnInitLog"      }    },    {      "Id": "CloudWatchIISLogs",      "FullName":
                  "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/IISLogs"      }    },    {      "Id" : "CloudWatch",      "FullName"
                  : "AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "AccessKey" : "",        "SecretKey" : "",${Param1}        "NameSpace"
                  : "Windows/Default"      }    }],    "Flows": {      "Flows": [        "ApplicationEventLog,CloudWatchApplicationEventLog",        "SystemEventLog,CloudWatchSystemEventLog",        "SecurityEventLog,CloudWatchSecurityEventLog",        "EC2ConfigLog,CloudWatchEC2ConfigLog",        "CfnInitLog,CloudWatchCfnInitLog",        "IISLogs,CloudWatchIISLogs",        "MemoryPerformanceCounter,CloudWatch"      ]    }  }}'
                - Param1: !Sub '        "Region": "${AWS::Region}",'
                  Param2: !If
                    - ConfigureLogs
                    - !Sub '        "LogGroup": "${LogGroup}",'
                    - !Ref 'AWS::NoValue'
          commands:
            01-enable-SSM:
              command: powershell.exe -Command "Set-Service -Name AmazonSSMAgent -StartupType
                Automatic"
              waitAfterCompletion: '0'
            02-restart-SSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: '30'
        ConfigureCFN:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub
                - |-
                  [main]
                  ${Param1}
                  ${Param2}
                - Param1: !Sub 'stack=${AWS::StackId}'
                  Param2: !Sub 'region=${AWS::Region}'
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub
                - |-
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.Instance01A.Metadata.AWS::CloudFormation::Init
                  ${Param1}
                - Param1: !Sub 'action=cfn-init.exe --verbose --configsets All --stack
                    ${AWS::StackId} --resource Instance01A --region ${AWS::Region}'
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
        ConfigureOS:
          commands:
            01-disable-windows-firewall:
              command: powershell.exe -Command "Get-NetFirewallProfile | Set-NetFirewallProfile
                -Enabled False"
              waitAfterCompletion: '0'
            02-set-execution-policy:
              command: powershell.exe -Command "Set-ExecutionPolicy RemoteSigned -Force"
              waitAfterCompletion: '0'
        ConfigureHostName:
          commands:
            01-configure-hostname:
              command: !Sub 'powershell.exe Rename-Computer -NewName ${GetHostName.HostName}01a
                -Restart'
              waitAfterCompletion: forever
        JoinDomain:
          commands:
            01-join-domain:
              command: !Sub
                - powershell.exe -Command "Add-Computer -DomainName ${Param1} -Credential
                  (New-Object System.Management.Automation.PSCredential('${Param2}\${DomainAdminUser}',(ConvertTo-SecureString
                  '${DomainAdminPassword}' -AsPlainText -Force))) -Restart"
                - Param1: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
                  Param2: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCNetBIOSDomain
              waitAfterCompletion: forever
        InstallWebServer:
          commands:
            01_install_webserver:
              command: powershell.exe -Command "Install-WindowsFeature Web-Server
                -IncludeAllSubFeature"
              waitAfterCompletion: '0'
        InstallAtom:
          packages:
            msi:
              atom: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${AtomProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
        InstallProduct:
          packages:
            msi:
              placeholder: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${ProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
        InstallApplication:
          sources:
            C:\Inetpub\wwwroot: !Sub
                - https://${ApplicationsBucket}.${s3}.amazonaws.com/${ApplicationKey}
                - ApplicationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ApplicationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
        ConfigureApplication:
          files:
            c:\Inetpub\wwwroot\index.htm:
              content: !Sub
                - |-
                  <html>
                  <head>
                  ${Param1}
                  </head>
                  <body>
                  ${Param2}
                  ${Param3}
                  </body>
                  </html>
                - Param1: !Sub '<title>${ApplicationName}-${ComponentName} Test Application</title>'
                  Param2: !Sub '<h1>${ApplicationName}-${ComponentName} (${ApplicationVersion})</h1>'
                  Param3: !Sub '<p>Running on ${GetHostName.HostName}01a</p>'
        SignalCFN:
          commands:
            01-signal-success:
              command: !Sub 'cfn-signal.exe --exit-code 0 "${Instance01AWaitHandle}"'
    Properties:
      ImageId: !If
        - GetImageID
        - !GetAtt 'GetWindowsImageId.ImageId'
        - !FindInMap
          - ImageIdMap
          - !Ref 'AWS::Region'
          - !Ref 'OSDate'
      InstanceType: !FindInMap
        - InstanceTypeMap
        - Web
        - !Ref 'EnvironmentType'
      IamInstanceProfile: !Ref 'InstanceProfile'
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - Description: !Sub
            - ${Param1}-${ApplicationName}-${ComponentName}-NetworkInterface01A-eth0
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
          DeviceIndex: '0'
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-WebSubnetA
          PrivateIpAddress: !If
            - ConfigureStaticAddress
            - !GetAtt 'AddressCalculatorA.Address4'
            - !Ref 'AWS::NoValue'
          GroupSet:
            - !Ref 'InstanceSecurityGroup'
            - !ImportValue
              Fn::Sub: ${ActiveDirectoryStackName}-DomainMemberSecurityGroup
            - !ImportValue
              Fn::Sub: ${RabbitMQStackName}-ClientSecurityGroup
            - !ImportValue
              Fn::Sub: ${MongoDBStackName}-ClientSecurityGroup
            - !If
              - ConfigureFederatedSecurityIntegration
              - !ImportValue
                Fn::Sub: ${FederatedSecuritySecurityServerStackName}-ClientSecurityGroup
              - !Ref 'AWS::NoValue'
            - !ImportValue
              Fn::Sub: ${EngineMonitoringStackName}-ClientSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '32'
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: '16'
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-${ComponentName}-Instance01A
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - Key: HostName
          Value: !Sub '${GetHostName.HostName}01a'
        - !If
          - ConfigureSchedule
          - Key: Schedule
            Value: !Ref 'Schedule'
          - !Ref 'AWS::NoValue'
      UserData: !Base64
        Fn::Sub:
          - |-
            <script>
            ${Param1}
            </script>
          - Param1: !Sub 'cfn-init.exe --verbose --configsets All --stack ${AWS::StackId}
              --resource Instance01A --region ${AWS::Region}'
  Instance01AWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref 'Instance01AWaitHandle'
      Timeout: '3600'
    DependsOn: Instance01A
  Instance01AWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  PublicHostNameRecordSet01A:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub 'Public DNS Host Name of the ${ApplicationName}-${ComponentName} Instance01A.'
      Name: !Sub
        - ${GetHostName.HostName}01a.${Param1}.
        - Param1: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt 'Instance01A.PublicIp'
  AddressCalculatorB:
    Type: Custom::AddressCalculator
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${StandardCIDRFunctionsStackName}-AddressCalculatorFunctionArn
      SubnetId: !ImportValue
        Fn::Sub: ${VPCStackName}-WebSubnetB
    Condition: ConfigureStaticAddress&MultiZone
  Instance01B:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref 'Role'
          buckets:
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ProductsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${StandardBucketsStackName}-ApplicationsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - !If
              - ConfigureLogs
              - ConfigureLogs
              - !Ref 'AWS::NoValue'
            - ConfigureCFN
            - ConfigureOS
            - ConfigureHostName
            - JoinDomain
            - InstallWebServer
            - !If [ InstallAtom, InstallAtom, !Ref 'AWS::NoValue' ]
            - !If [ InstallProduct, InstallProduct, !Ref 'AWS::NoValue' ]
            - !If [ InstallApplication, InstallApplication, ConfigureApplication ]
            - SignalCFN
        ConfigureLogs:
          files:
            C:\Program Files\Amazon\SSM\Plugins\awsCloudWatch\AWS.EC2.Windows.CloudWatch.json:
              content: !Sub
                - '{  "IsEnabled" : true,  "EngineConfiguration" : {    "PollInterval"
                  : "00:00:10",    "Components" : [{      "Id" : "ApplicationEventLog",      "FullName"
                  : "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "LogName" : "Application",        "Levels" : "7"      }    },    {      "Id"
                  : "SystemEventLog",      "FullName" : "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "LogName" : "System",        "Levels" : "7"      }    },    {      "Id"
                  : "SecurityEventLog",      "FullName" : "AWS.EC2.Windows.CloudWatch.EventLog.EventLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "LogName" : "Security",        "Levels" : "7"      }    },    {      "Id"
                  : "EC2ConfigLog",      "FullName": "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "LogDirectoryPath": "C:\\Program Files\\Amazon\\Ec2ConfigService\\Logs",        "TimestampFormat":
                  "yyyy-MM-ddTHH:mm:ss.fffZ:",        "Encoding": "ASCII",        "Filter":
                  "EC2ConfigLog.txt",        "CultureName": "en-US",        "TimeZoneKind":
                  "UTC"      }    },    {      "Id": "CfnInitLog",      "FullName":
                  "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "LogDirectoryPath": "C:\\cfn\\log",        "TimestampFormat":
                  "yyyy-MM-dd HH:mm:ss,fff",        "Encoding": "ASCII",        "Filter":
                  "cfn-init.log",        "CultureName": "en-US",        "TimeZoneKind":
                  "Local"      }    },    {      "Id" : "IISLogs",      "FullName"
                  : "AWS.EC2.Windows.CloudWatch.CustomLog.CustomLogInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "LogDirectoryPath" : "C:\\inetpub\\logs\\LogFiles\\W3SVC1",        "TimestampFormat"
                  : "yyyy-MM-dd HH:mm:ss",        "Encoding" : "UTF-8",        "Filter"
                  : "",        "CultureName" : "en-US",        "TimeZoneKind" : "UTC",        "LineCount"
                  : "3"      }    },    {      "Id" : "MemoryPerformanceCounter",      "FullName"
                  : "AWS.EC2.Windows.CloudWatch.PerformanceCounterComponent.PerformanceCounterInputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "CategoryName" : "Memory",        "CounterName" : "Available
                  MBytes",        "InstanceName" : "",        "MetricName" : "Memory",        "Unit"
                  : "Megabytes",        "DimensionName" : "",        "DimensionValue"
                  : ""      }    },    {      "Id": "CloudWatchApplicationEventLog",      "FullName":
                  "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/ApplicationEventLog"      }    },    {      "Id":
                  "CloudWatchSystemEventLog",      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/SystemEventLog"      }    },    {      "Id":
                  "CloudWatchSecurityEventLog",      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/SecurityEventLog"      }    },    {      "Id":
                  "CloudWatchEC2ConfigLog",      "FullName": "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/EC2ConfigLog"      }    },    {      "Id": "CloudWatchCfnInitLog",      "FullName":
                  "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/CfnInitLog"      }    },    {      "Id": "CloudWatchIISLogs",      "FullName":
                  "AWS.EC2.Windows.CloudWatch.CloudWatchLogsOutput,AWS.EC2.Windows.CloudWatch",      "Parameters":
                  {        "AccessKey": "",        "SecretKey": "",${Param1}${Param2}        "LogStream":
                  "Web/{instance_id}/IISLogs"      }    },    {      "Id" : "CloudWatch",      "FullName"
                  : "AWS.EC2.Windows.CloudWatch.CloudWatch.CloudWatchOutputComponent,AWS.EC2.Windows.CloudWatch",      "Parameters"
                  : {        "AccessKey" : "",        "SecretKey" : "",${Param1}        "NameSpace"
                  : "Windows/Default"      }    }],    "Flows": {      "Flows": [        "ApplicationEventLog,CloudWatchApplicationEventLog",        "SystemEventLog,CloudWatchSystemEventLog",        "SecurityEventLog,CloudWatchSecurityEventLog",        "EC2ConfigLog,CloudWatchEC2ConfigLog",        "CfnInitLog,CloudWatchCfnInitLog",        "IISLogs,CloudWatchIISLogs",        "MemoryPerformanceCounter,CloudWatch"      ]    }  }}'
                - Param1: !Sub '        "Region": "${AWS::Region}",'
                  Param2: !If
                    - ConfigureLogs
                    - !Sub '        "LogGroup": "${LogGroup}",'
                    - !Ref 'AWS::NoValue'
          commands:
            01-enable-SSM:
              command: powershell.exe -Command "Set-Service -Name AmazonSSMAgent -StartupType
                Automatic"
              waitAfterCompletion: '0'
            02-restart-SSM:
              command: powershell.exe -Command "Restart-Service AmazonSSMAgent"
              waitAfterCompletion: '30'
        ConfigureCFN:
          files:
            c:\cfn\cfn-hup.conf:
              content: !Sub
                - |-
                  [main]
                  ${Param1}
                  ${Param2}
                - Param1: !Sub 'stack=${AWS::StackId}'
                  Param2: !Sub 'region=${AWS::Region}'
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Sub
                - |-
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.Instance01B.Metadata.AWS::CloudFormation::Init
                  ${Param1}
                - Param1: !Sub 'action=cfn-init.exe --verbose --configsets All --stack
                    ${AWS::StackId} --resource Instance01B --region ${AWS::Region}'
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\cfn\cfn-hup.conf
                  - c:\cfn\hooks.d\cfn-auto-reloader.conf
        ConfigureOS:
          commands:
            01-disable-windows-firewall:
              command: powershell.exe -Command "Get-NetFirewallProfile | Set-NetFirewallProfile
                -Enabled False"
              waitAfterCompletion: '0'
            02-set-execution-policy:
              command: powershell.exe -Command "Set-ExecutionPolicy RemoteSigned -Force"
              waitAfterCompletion: '0'
        ConfigureHostName:
          commands:
            01-configure-hostname:
              command: !Sub 'powershell.exe Rename-Computer -NewName ${GetHostName.HostName}01b
                -Restart'
              waitAfterCompletion: forever
        JoinDomain:
          commands:
            01-join-domain:
              command: !Sub
                - powershell.exe -Command "Add-Computer -DomainName ${Param1} -Credential
                  (New-Object System.Management.Automation.PSCredential('${Param2}\${DomainAdminUser}',(ConvertTo-SecureString
                  '${DomainAdminPassword}' -AsPlainText -Force))) -Restart"
                - Param1: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
                  Param2: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCNetBIOSDomain
              waitAfterCompletion: forever
        InstallWebServer:
          commands:
            01_install_webserver:
              command: powershell.exe -Command "Install-WindowsFeature Web-Server
                -IncludeAllSubFeature"
              waitAfterCompletion: '0'
        InstallAtom:
          packages:
            msi:
              atom: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${AtomProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
        InstallProduct:
          packages:
            msi:
              placeholder: !Sub
                - https://${ProductsBucket}.${s3}.amazonaws.com/${ProductKey}
                - ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
        InstallApplication:
          sources:
            C:\Inetpub\wwwroot: !Sub
                - https://${ApplicationsBucket}.${s3}.amazonaws.com/${ApplicationKey}
                - ApplicationsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ApplicationsBucket
                  s3: !If [ ConfigureGlobal, s3, !Sub 's3-${AWS::Region}' ]
        ConfigureApplication:
          files:
            c:\Inetpub\wwwroot\index.htm:
              content: !Sub
                - |-
                  <html>
                  <head>
                  ${Param1}
                  </head>
                  <body>
                  ${Param2}
                  ${Param3}
                  </body>
                  </html>
                - Param1: !Sub '<title>${ApplicationName}-${ComponentName} Test Application</title>'
                  Param2: !Sub '<h1>${ApplicationName}-${ComponentName} (${ApplicationVersion})</h1>'
                  Param3: !Sub '<p>Running on ${GetHostName.HostName}01b</p>'
        SignalCFN:
          commands:
            01-signal-success:
              command: !Sub 'cfn-signal.exe --exit-code 0 "${Instance01BWaitHandle}"'
    Properties:
      ImageId: !If
        - GetImageID
        - !GetAtt 'GetWindowsImageId.ImageId'
        - !FindInMap
          - ImageIdMap
          - !Ref 'AWS::Region'
          - !Ref 'OSDate'
      InstanceType: !FindInMap
        - InstanceTypeMap
        - Web
        - !Ref 'EnvironmentType'
      IamInstanceProfile: !Ref 'InstanceProfile'
      KeyName: !Ref 'KeyName'
      NetworkInterfaces:
        - Description: !Sub
            - ${Param1}-${ApplicationName}-${ComponentName}-NetworkInterface01B-eth0
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
          DeviceIndex: '0'
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-WebSubnetB
          PrivateIpAddress: !If
            - ConfigureStaticAddress&MultiZone
            - !GetAtt 'AddressCalculatorB.Address4'
            - !Ref 'AWS::NoValue'
          GroupSet:
            - !Ref 'InstanceSecurityGroup'
            - !ImportValue
              Fn::Sub: ${ActiveDirectoryStackName}-DomainMemberSecurityGroup
            - !ImportValue
              Fn::Sub: ${RabbitMQStackName}-ClientSecurityGroup
            - !ImportValue
              Fn::Sub: ${MongoDBStackName}-ClientSecurityGroup
            - !If
              - ConfigureFederatedSecurityIntegration
              - !ImportValue
                Fn::Sub: ${FederatedSecuritySecurityServerStackName}-ClientSecurityGroup
              - !Ref 'AWS::NoValue'
            - !ImportValue
              Fn::Sub: ${EngineMonitoringStackName}-ClientSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '32'
        - DeviceName: /dev/xvdb
          Ebs:
            VolumeSize: '16'
            VolumeType: gp2
      Tags:
        - Key: Name
          Value: !Sub
            - ${Param1}-${ApplicationName}-${ComponentName}-Instance01B
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - Key: HostName
          Value: !Sub '${GetHostName.HostName}01b'
        - !If
          - ConfigureSchedule
          - Key: Schedule
            Value: !Ref 'Schedule'
          - !Ref 'AWS::NoValue'
      UserData: !Base64
        Fn::Sub:
          - |-
            <script>
            ${Param1}
            </script>
          - Param1: !Sub 'cfn-init.exe --verbose --configsets All --stack ${AWS::StackId}
              --resource Instance01B --region ${AWS::Region}'
    Condition: ConfigureMultiZone
  Instance01BWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref 'Instance01BWaitHandle'
      Timeout: '3600'
    DependsOn: Instance01B
    Condition: ConfigureMultiZone
  Instance01BWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Condition: ConfigureMultiZone
  PublicHostNameRecordSet01B:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS Host Name of the ${ApplicationName}-${ComponentName} Instance01B
      Name: !Sub
        - ${GetHostName.HostName}01b.${Param1}.
        - Param1: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPublicDomain
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt 'Instance01B.PublicIp'
    Condition: ConfigureMultiZone
  ServiceNameRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PublicHostedZone
      Comment: !Sub Public DNS Service Name of the ${ApplicationName}-${ComponentName} Service
      RecordSets:
        - Name: !Sub
            - ${ApplicationDomain}.${Param1}.
            - Param1: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCPublicDomain
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneNameID'
            DNSName: !GetAtt 'LoadBalancer.DNSName'
    Condition: ConfigureDomainName
Outputs:
  ClientSecurityGroup:
    Description: The Client SecurityGroup
    Value: !Ref 'ClientSecurityGroup'
    Export:
      Name: !Sub '${AWS::StackName}-ClientSecurityGroup'
  LoadBalancerSecurityGroup:
    Description: The LoadBalancer SecurityGroup
    Value: !Ref 'LoadBalancerSecurityGroup'
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerSecurityGroup'
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref 'InstanceSecurityGroup'
    Export:
      Name: !Sub '${AWS::StackName}-InstanceSecurityGroup'
  Instance01A:
    Description: The Instance01A
    Value: !Ref 'Instance01A'
  HostName01A:
    Description: The HostName01A
    Value: !Sub
      - ${GetHostName.HostName}01a.${Param1}
      - Param1: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
  Instance01B:
    Description: The Instance01B
    Value: !Ref 'Instance01B'
    Condition: ConfigureMultiZone
  HostName01B:
    Description: The HostName01B
    Value: !Sub
      - ${GetHostName.HostName}01b.${Param1}
      - Param1: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPrivateDomain
    Condition: ConfigureMultiZone
  URL:
    Description: The Application Website URL
    Value: !Sub
      - http://${ApplicationDomain}.${Param1}/
      - Param1: !ImportValue
          Fn::Sub: ${VPCStackName}-VPCPublicDomain
    Condition: ConfigureDomainName
