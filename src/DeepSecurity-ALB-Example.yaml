AWSTemplateFormatVersion: 2010-09-09
Description: DeepSecurity-ALB-Example Template.
  This template is to work out details of an ALB
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - DeepSecurityDatabaseStackName
          - WindowsBastionsStackName
          - VPNStackName
          - ActiveDirectoryStackName
          - VPCStackName
          - IdentifierFunctionsStackName
          - MarketplaceAMIFunctionsStackName
          - BucketsStackName
          - TopicsStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - EnvironmentType
          - EnvironmentZones
      - Label:
          default: Utility Dependencies Configuration
        Parameters:
          - SharedScriptFolder
          - ScriptFolder
          - SharedConfigurationFolder
          - ConfigurationFolder
          - BackupFolder
      - Label:
          default: Utility Configuration
        Parameters:
          - UtilityName
          - UtilityVersion
          - AdministratorUsername
          - AdministratorPassword
          - LogRetention
      - Label:
          default: Security Configuration
        Parameters:
          - AdministratorNetworks
          - AdministratorNetworkDescriptions
    ParameterLabels:
      DeepSecurityDatabaseStackName:
        default: DeepSecurityDatabase Stack Name
      WindowsBastionsStackName:
        default: WindowsBastions Stack Name
      VPNStackName:
        default: VPN Stack Name
      ActiveDirectoryStackName:
        default: ActiveDirectory Stack Name
      VPCStackName:
        default: VPC Stack Name
      IdentifierFunctionsStackName:
        default: IdentifierFunctions Stack Name
      MarketplaceAMIFunctionsStackName:
        default: MarketplaceAMIFunctions Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      KeyName:
        default: Key Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      SharedScriptFolder:
        default: Shared Script Folder
      ScriptFolder:
        default: Script Folder
      SharedConfigurationFolder:
        default: Shared Configuration Folder
      ConfigurationFolder:
        default: Configuration Folder
      BackupFolder:
        default: Backup Folder
      UtilityName:
        default: Utility Name
      UtilityVersion:
        default: Utility Version
      AdministratorUsername:
        default: Administrator Username
      AdministratorPassword:
        default: Administrator Password
      LogRetention:
        default: Log Retention
      AdministratorNetworks:
        default: Administrator Networks
      AdministratorNetworkDescriptions:
        default: Administrator Network Descriptions
Parameters:
  DeepSecurityDatabaseStackName:
    Description: Name of the CloudFormation Stack containing the Deep Security Database
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-DeepSecurity-Database
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  WindowsBastionsStackName:
    Description: Name of the CloudFormation Stack containing the Windows Bastions
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPNStackName:
    Description: Name of the CloudFormation Stack containing the VPN Instances
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  ActiveDirectoryStackName:
    Description: Name of the CloudFormation Stack containing the ActiveDirectory DomainControllers
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  IdentifierFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Identifier Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: IdentifierFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  MarketplaceAMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Marketplace AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: MarketplaceAMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instance
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: HLS
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Analytics
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: small
    AllowedValues:
      - small
      - medium
      - large
      - xlarge
    ConstraintDescription: must be small, medium, large or xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones to build
    Type: String
    Default: 2
    AllowedValues:
      - 1
      - 2
    ConstraintDescription: must be 1 or 2.
  SharedScriptFolder:
    Description: Folder within the S3 Scripts bucket containing Shared Scripts deployed by this Template
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Linux
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  ScriptFolder:
    Description: Folder within the S3 Scripts bucket containing Scripts deployed by this Template
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DeepSecurity
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SharedConfigurationFolder:
    Description: Folder within the S3 Configurations bucket containing Shared Configurations deployed by this Template
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Linux
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  ConfigurationFolder:
    Description: Folder within the S3 Configurations bucket containing Configurations deployed by this Template
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DeepSecurity
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  BackupFolder:
    Description: Folder within the S3 Backups bucket containing Backups used by this Template
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DeepSecurity
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  UtilityName:
    Description: Name of the Utility associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DeepSecurity
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  UtilityVersion:
    Description: Deep Security Version. Used to select a specific Deep Security version if non-blank, otherwise a default version is used
    Type: String
    Default: '11.1.227'
    AllowedPattern: (^$|^[0-9]*\.[0-9]*\.[0-9]*$)
    ConstraintDescription: must be a version of the form x.y.z.
  AdministratorUsername:
    Description: Name of the Administrator User
    Type: String
    MinLength: 2
    MaxLength: 63
    Default: MasterAdmin
    AllowedPattern: ^[A-Za-z][A-Za-z0-9]*$
    ConstraintDescription: must begin with a letter and contain alphanumeric characters.
  AdministratorPassword:
    Description: Password of the Administrator User
    Type: String
    MinLength: 8
    MaxLength: 32
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: 'must be: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.'
  AdministratorNetworks:
    Description: Networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  AdministratorNetworkDescriptions:
    Description: Descriptions of networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each a short text description or '-'.
Mappings:
  RegionNameMap:
    us-east-1:
      Name: Virginia
    us-east-2:
      Name: Ohio
    us-west-1:
      Name: California
    us-west-2:
      Name: Oregon
    ca-central-1:
      Name: Canada
    eu-west-1:
      Name: Ireland
    eu-central-1:
      Name: Frankfurt
    eu-west-2:
      Name: London
    eu-west-3:
      Name: Paris
    ap-southeast-1:
      Name: Singapore
    ap-southeast-2:
      Name: Sydney
    ap-northeast-2:
      Name: Seoul
    ap-northeast-1:
      Name: Tokyo
    ap-south-1:
      Name: Mumbai
    sa-east-1:
      Name: SaoPaulo
  DefaultImageIdMap:
    AMI:
      default: Deep Security 11.1.227-d70fb77f-c90c-40e9-8cba-2d257a7b01d2-ami-79132d06.4 (PerHost license)
    us-east-1:
      default: ami-91e2dcee
    us-east-2:
      default: ami-d3be85b6
    us-west-1:
      default: ami-73c22010
    us-west-2:
      default: ami-448cd13c
    ca-central-1:
      default: ami-d5e16cb1
    eu-west-1:
      default: ami-bfa0bc55
    eu-central-1:
      default: ami-d6e2e43d
    eu-west-2:
      default: ami-d23dd6b5
    eu-west-3:
      default: ami-88a616f5
    ap-southeast-1:
      default: ami-457c06af
    ap-southeast-2:
      default: ami-af892dcd
    ap-northeast-2:
      default: ami-07eb5c69
    ap-northeast-1:
      default: ami-ce325c23
    ap-south-1:
      default: ami-01f3c36e
    sa-east-1:
      default: ami-0b3a1c67
  InstanceTypeMap:
    Manager:
      small: t3.small
      medium: t3.medium
      large: c4.large
      xlarge: c4.xlarge
Conditions:
  ConfigureGlobalS3: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  ConfigureWindowsBastionsIntegration: !Not [ !Equals [ !Ref WindowsBastionsStackName, '' ]]
  ConfigureVPNIntegration: !Not [ !Equals [ !Ref VPNStackName, '' ]]
  ConfigureKey: !Not [ !Equals [ !Ref KeyName, '' ]]
  ConfigureMultiZone: !Not [ !Equals [ !Ref EnvironmentZones, 1 ]]
  GetImageID: !Not [ !Equals [ !Ref UtilityVersion, 11.1.227 ]] # Version in DefaultImageIdMap
  ConfigureAdministratorNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AWSMarketplaceMeteringFullAccess
      Policies:
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/${SharedScriptFolder}/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/${ScriptFolder}/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
        - PolicyName: DownloadConfigurationFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/${SharedConfigurationFolder}/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/${ConfigurationFolder}/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
        - PolicyName: BackupInS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BackupsBucket}/${BackupFolder}
                    - BackupsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-BackupsBucket
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BackupsBucket}/${BackupFolder}/*
                    - BackupsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-BackupsBucket
        - PolicyName: InstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeLicenses
                  - ec2:DescribeImages
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeVpcs
                  - iam:ListAccountAliases
                  - sts:AssumeRole
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeSecurityGroups
                  - iam:ListAccountAliases
                Resource: '*'
        - PolicyName: AddInstanceToELBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeLicenses
                  - ec2:DescribeInstances
                  - ec2:DescribeImages
                  - ec2:DescribeRegions
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeSecurityGroups
                  - iam:ListAccountAliases
                  - sts:AssumeRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - elasticloadbalancing:CreateLoadBalancerListeners
                  - elasticloadbalancing:CreateLoadBalancerPolicy
                  - elasticloadbalancing:SetLoadBalancerPoliciesOfListener
                Resource: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/${LoadBalancer}
              - Effect: Allow
                Action:
                  - iam:UploadServerCertificate
                  - iam:GetServerCertificate
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:server-certificate/DeepSecurityElbCertificate-${AWS::StackName}
              - Effect: Allow
                Action:
                  - elasticloadbalancing:DescribeLoadBalancers
                Resource: '*'
  AgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${VPCName}-${UtilityName}-AgentSecurityGroup
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-AgentSecurityGroup
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  AgentSecurityGroupIngressAgent:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AgentSecurityGroup
      IpProtocol: tcp
      FromPort: 4118
      ToPort: 4118
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup (Agent)
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${VPCName}-${UtilityName}-LoadBalancerSecurityGroup
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup (Console)
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup (Console)
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        # BEGIN: Not sure if this is really needed - why would Agents talk to the console? Is this to reach an API?
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref AgentSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-AgentSecurityGroup (Console)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        # END: Not sure if this is really needed - why would Agents talk to the console? Is this to reach an API?
        - IpProtocol: tcp
          FromPort: 4120
          ToPort: 4120
          SourceSecurityGroupId: !Ref AgentSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-AgentSecurityGroup (Heartbeat)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - IpProtocol: tcp
          FromPort: 4122
          ToPort: 4122
          SourceSecurityGroupId: !Ref AgentSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-AgentSecurityGroup (Relay)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Global (All)
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-LoadBalancerSecurityGroup
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCNetwork
          Description: VPC (ICMP)
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-LoadBalancerSecurityGroup (Console)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - IpProtocol: tcp
          FromPort: 4120
          ToPort: 4120
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-LoadBalancerSecurityGroup (Heartbeat)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - IpProtocol: tcp
          FromPort: 4122
          ToPort: 4122
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-LoadBalancerSecurityGroup (Relay)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup (SSH)
          - !Ref AWS::NoValue
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup (Console)
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup (SSH)
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup (Console)
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Global (All)
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-InstanceSecurityGroup
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroupIngressConsole:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup (Console)
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroupIngressAgent:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 4118
      ToPort: 4118
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup (Agent)
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroupIngressHeartbeat:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 4120
      ToPort: 4120
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup (Heartbeat)
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroupIngressRelay:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 4122
      ToPort: 4122
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup (Relay)
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /${SystemName}/${UtilityName}/${VPCName}
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      RetentionInDays: !Ref LogRetention

  LoadBalancerOld:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue
          Fn::Sub: ${VPCStackName}-ApplicationSubnetA
        - !If
          - ConfigureMultiZone
          - !ImportValue
              Fn::Sub: ${VPCStackName}-ApplicationSubnetB
          - !Ref 'AWS::NoValue'
      #Instances:
      #  - !Ref Instance01A
      #  - !If [ ConfigureMultiZone, !Ref Instance01B, !Ref 'AWS::NoValue' ]
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internal
      CrossZone: true
      Listeners:
        - Protocol: TCP
          LoadBalancerPort: 4120
          InstancePort: 4120
        - Protocol: TCP
          LoadBalancerPort: 4122
          InstancePort: 4122
      HealthCheck:
        Target: HTTPS:443/rest/status/manager/ping
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 30
        Timeout: 5
      ConnectionSettings:
        IdleTimeout: 600
    DependsOn: LoadBalancerSecurityGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${GetHostName.HostName}
      Type: application
      Scheme: internal
      Subnets:
        - !ImportValue
          Fn::Sub: ${VPCStackName}-ApplicationSubnetA
        - !If
          - ConfigureMultiZone
          - !ImportValue
              Fn::Sub: ${VPCStackName}-ApplicationSubnetB
          - !Ref AWS::NoValue
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 50
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-LoadBalancer
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - Key: HostName
          Value: !Sub ${GetHostName.HostName}
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      Protocol: HTTP
      Port: 80
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup


  GetHostName:
    Type: Custom::GetHostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${IdentifierFunctionsStackName}-GetHostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !ImportValue
        Fn::Sub: ${VPCStackName}-VPCName
      ApplicationName: !Ref UtilityName
  GetDeepSecurityImageId:
    Type: Custom::GetDeepSecurityImageId
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${MarketplaceAMIFunctionsStackName}-GetDeepSecurityImageIdFunctionArn
      Region: !Ref AWS::Region
      License: PerHost
      Version: !Ref UtilityVersion
    Condition: GetImageID
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
# END New Pre-Instance


Outputs:
  AgentSecurityGroup:
    Description: The Agent SecurityGroup
    Value: !Ref AgentSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-AgentSecurityGroup
  LoadBalancerSecurityGroup:
    Description: The LoadBalancer SecurityGroup
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerSecurityGroup
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
  LoadBalancer:
    Description: The Load Balancer
    Value: !Ref LoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancer
  LoadBalancerDNSName:
    Description: The Domain Name of the LoadBalancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerDNSName
  Listener:
    Description: A reference to a port 80 listener
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
