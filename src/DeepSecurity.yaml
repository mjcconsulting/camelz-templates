AWSTemplateFormatVersion: 2010-09-09
Description: DeepSecurity Template.
  This template implements the Trend Micro DeepSecurity Servers and Load Balancers.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Stack Dependencies
        Parameters:
          - DeepSecurityDatabaseStackName
          - WindowsBastionsStackName
          - VPNStackName
          - DirectoryStackName
          - VPCStackName
          - IdentifierFunctionsStackName
          - MarketplaceAMIFunctionsStackName
          - BucketsStackName
          - TopicsStackName
      - Label:
          default: Resource Dependencies
        Parameters:
          - KeyName
      - Label:
          default: System Configuration
        Parameters:
          - CompanyName
          - SystemName
      - Label:
          default: Environment Configuration
        Parameters:
          - EnvironmentType
          - EnvironmentZones
      - Label:
          default: Utility Dependencies Configuration
        Parameters:
          - DeepSecurityAgentProductObject
      - Label:
          default: Utility Configuration
        Parameters:
          - UtilityName

          - UtilityDomain
          - UtilityVersion
          - UtilityAdministratorUserName
          - UtilityAdministratorPassword
          - UtilityLDAPBindCN
          - UtilityLDAPBindPassword
          - LogRetention
      - Label:
          default: Database Configuration
        Parameters:
          - DatabaseName
          - DatabaseUserName
          - DatabasePassword
      - Label:
          default: Security Configuration
        Parameters:
          - AdministratorNetworks
          - AdministratorNetworkDescriptions
    ParameterLabels:
      DeepSecurityDatabaseStackName:
        default: DeepSecurityDatabase Stack Name
      WindowsBastionsStackName:
        default: WindowsBastions Stack Name
      VPNStackName:
        default: VPN Stack Name
      DirectoryStackName:
        default: Directory Stack Name
      VPCStackName:
        default: VPC Stack Name
      IdentifierFunctionsStackName:
        default: IdentifierFunctions Stack Name
      MarketplaceAMIFunctionsStackName:
        default: MarketplaceAMIFunctions Stack Name
      BucketsStackName:
        default: Buckets Stack Name
      TopicsStackName:
        default: Topics Stack Name
      KeyName:
        default: Key Name
      CompanyName:
        default: Company Name
      SystemName:
        default: System Name
      EnvironmentType:
        default: Environment Type
      EnvironmentZones:
        default: Environment Zones
      DeepSecurityAgentProductObject:
        default: Deep Security Agent Product Object
      UtilityName:
        default: Utility Name
      UtilityVersion:
        default: Utility Version
      UtilityAdministratorUserName:
        default: Utility Administrator User Name
      UtilityAdministratorPassword:
        default: Utility Administrator Password
      ApplicationLDAPBindCN:
        default: Application LDAP Bind Common Name
      ApplicationLDAPBindPassword:
        default: Application LDAP Bind Password
      LogRetention:
        default: Log Retention
      DatabaseName:
        default: Database Name
      DatabaseUserName:
        default: Database User Name
      DatabasePassword:
        default: Database Password
      AdministratorNetworks:
        default: Administrator Networks
      AdministratorNetworkDescriptions:
        default: Administrator Network Descriptions
Parameters:
  DeepSecurityDatabaseStackName:
    Description: Name of the CloudFormation Stack containing the Deep Security Database
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-DeepSecurity-Database
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  WindowsBastionsStackName:
    Description: Name of the CloudFormation Stack containing the Windows Bastions
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPNStackName:
    Description: Name of the CloudFormation Stack containing the VPN Instances
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][-a-zA-Z0-9]*$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  DirectoryStackName:
    Description: Name of the CloudFormation Stack containing the Directory Management Workstation (DirectoryService) or DomainControllers (ActiveDirectory)
    Type: String
    MaxLength: 64
    Default: ''
    AllowedPattern: (^$|^[A-Z][a-zA-Z0-9]*-(ActiveDirectory|DirectoryService)$)
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  VPCStackName:
    Description: Name of the CloudFormation Stack containing the VPC
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Production-VPC
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  IdentifierFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Identifier Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: IdentifierFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  MarketplaceAMIFunctionsStackName:
    Description: Name of the CloudFormation Stack containing the Marketplace AMI Functions
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: MarketplaceAMIFunctions
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  BucketsStackName:
    Description: Name of the CloudFormation Stack containing Buckets
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Buckets
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  TopicsStackName:
    Description: Name of the CloudFormation Stack containing Topics
    Type: String
    MinLength: 2
    MaxLength: 64
    Default: Topics
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the Instances
    Type: AWS::EC2::KeyPair::KeyName
    MaxLength: 32
    Default: administrator
    AllowedPattern: (^$|^[_a-zA-Z0-9]*$)
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  CompanyName:
    Description: Name of the Company associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: HLS
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  SystemName:
    Description: Name of the System associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: Analytics
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  EnvironmentType:
    Description: Type of the Environment to build. Used to select size-related options in Mappings
    Type: String
    Default: large
    AllowedValues:
      - large
      - xlarge
    ConstraintDescription: must be large or xlarge.
  EnvironmentZones:
    Description: Number of Availability Zones to build
    Type: String
    Default: 2
    AllowedValues:
      - 1
      - 2
    ConstraintDescription: must be 1 or 2.
  DeepSecurityAgentProductObject:
    Description: Object within the S3 bucket and folder containing the Deep Security Agent installer
    Type: String
    MaxLength: 64
    Default: 'Agent-amzn1-10.0.0-2240.x86_64.zip'
    AllowedPattern: (^$|^[-_.a-zA-Z0-9]*$)
    ConstraintDescription: must be a valid filename, not containing slashes.
  UtilityName:
    Description: Name of the Utility associated with the Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: DeepSecurity
    AllowedPattern: ^[A-Z][a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters.
  UtilityDomain:
    Description: DNS Name of the Utility associated with the Stack
    Type: String
    MaxLength: 16
    Default: dsm
    AllowedPattern: ^[a-z][-a-z0-9]*$
    ConstraintDescription: must begin with a lower case letter and contain only lower case letters, numbers and dashes.
  UtilityVersion:
    Description: Version of the Utility. Used to select a specific Deep Security version if non-blank, otherwise a default version is used
    Type: String
    Default: '11.1.227'
    AllowedPattern: (^$|^[0-9]*\.[0-9]*\.[0-9]*$)
    ConstraintDescription: must be a version of the form x.y.z.
  UtilityAdministratorUserName:
    Description: Utility Administrator User Name
    Type: String
    MinLength: 5
    MaxLength: 62
    Default: MasterAdmin
    AllowedPattern: ^[A-Za-z][A-Za-z0-9]*$
    ConstraintDescription: must begin with a letter and contain alphanumeric characters.
  UtilityAdministratorPassword:
    Description: Utility Administrator Password
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 32
    AllowedPattern: ^[A-Z][-a-zA-Z0-9]*$
    ConstraintDescription: must begin with an upper case letter and contain alphanumeric characters and dashes.
  UtilityLDAPBindCN:
    Description: Utility LDAP Bind Common Name
    Type: String
    Default: DeepSecurity
    MinLength: 6
    MaxLength: 32
    AllowedValues:
      - DeepSecurity
    ConstraintDescription:  must be DeepSecurity.
  UtilityLDAPBindPassword:
    Description: Utility LDAP Bind Common Name Password
    Type: String
    NoEcho: true
    MinLength: 16
    MaxLength: 32
    AllowedPattern: ^[-a-zA-Z0-9]*$
    ConstraintDescription: must contain alphanumeric characters and dashes.
  LogRetention:
    Description: Number of days to retain CloudWatch Log Events
    Type: Number
    Default: 14
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    ConstraintDescription: 'must be: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827 or 3653.'
  DatabaseName:
    Description: Name of the Database used by this Stack
    Type: String
    MinLength: 2
    MaxLength: 32
    Default: dsm
    AllowedPattern: ^[-a-zA-Z0-9]*$
    ConstraintDescription: must contain alphanumeric characters and dashes.
  DatabaseUserName:
    Description: Database User Name
    Type: String
    MinLength: 5
    MaxLength: 64
    Default: dsadmin
    AllowedPattern: ^[a-z][-a-z0-9]*$
    ConstraintDescription: must begin with a lower case letter and contain only lower case letters, numbers and dashes.
  DatabasePassword:
    Description: Database Password
    Type: String
    NoEcho: true
    MinLength: 7
    MaxLength: 64
    AllowedPattern: (?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]*
    ConstraintDescription: Passwords must be at least 7 characters long and include at least one number and one upper case letter.
  AdministratorNetworks:
    Description: Networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each an IP CIDR range of the form x.x.x.x/x or '-'.
  AdministratorNetworkDescriptions:
    Description: Descriptions of networks that can administer the Application
    Type: String
    Default: -,-,-,-,-,-,-,-
    ConstraintDescription: must be a comma-separated list of 8 values, each a short text description or '-'.
Mappings:
  RegionNameMap:
    us-east-1:
      Name: Virginia
    us-east-2:
      Name: Ohio
    us-west-1:
      Name: California
    us-west-2:
      Name: Oregon
    ca-central-1:
      Name: Canada
    eu-west-1:
      Name: Ireland
    eu-central-1:
      Name: Frankfurt
    eu-west-2:
      Name: London
    eu-west-3:
      Name: Paris
    ap-southeast-1:
      Name: Singapore
    ap-southeast-2:
      Name: Sydney
    ap-northeast-2:
      Name: Seoul
    ap-northeast-1:
      Name: Tokyo
    ap-south-1:
      Name: Mumbai
    sa-east-1:
      Name: SaoPaulo
  DefaultImageIdMap:
    AMI:
      default: Deep Security 11.1.227-d70fb77f-c90c-40e9-8cba-2d257a7b01d2-ami-79132d06.4 (PerHost license)
    us-east-1:
      default: ami-91e2dcee
    us-east-2:
      default: ami-d3be85b6
    us-west-1:
      default: ami-73c22010
    us-west-2:
      default: ami-448cd13c
    ca-central-1:
      default: ami-d5e16cb1
    eu-west-1:
      default: ami-bfa0bc55
    eu-central-1:
      default: ami-d6e2e43d
    eu-west-2:
      default: ami-d23dd6b5
    eu-west-3:
      default: ami-88a616f5
    ap-southeast-1:
      default: ami-457c06af
    ap-southeast-2:
      default: ami-af892dcd
    ap-northeast-2:
      default: ami-07eb5c69
    ap-northeast-1:
      default: ami-ce325c23
    ap-south-1:
      default: ami-01f3c36e
    sa-east-1:
      default: ami-0b3a1c67
  InstanceTypeMap:
    Manager:
      large: m4.large
      xlarge: m4.xlarge
Conditions:
  ConfigureGlobalS3: !Equals [ !Ref 'AWS::Region', us-east-1 ]
  ConfigureWindowsBastionsIntegration: !Not [ !Equals [ !Ref WindowsBastionsStackName, '' ]]
  ConfigureVPNIntegration: !Not [ !Equals [ !Ref VPNStackName, '' ]]
  ConfigureDirectoryIntegration: !Not [ !Equals [ !Ref DirectoryStackName, '' ]]
  ConfigureActiveDirectoryIntegration: !Equals [ !Select [ 1, !Split [ '-', !Ref DirectoryStackName ]], 'ActiveDirectory' ]
  ConfigureKey: !Not [ !Equals [ !Ref KeyName, '' ]]
  ConfigureMultiZone: !Not [ !Equals [ !Ref EnvironmentZones, 1 ]]
  InstallDeepSecurityAgentProduct: !Not [ !Equals [ !Ref DeepSecurityAgentProductObject, '' ]]
  GetImageID: !Not [ !Equals [ !Ref UtilityVersion, 11.1.227 ]] # Version in DefaultImageIdMap
  ConfigureAdministratorNetwork0: !Not [ !Equals [ !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork1: !Not [ !Equals [ !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork2: !Not [ !Equals [ !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
  ConfigureAdministratorNetwork3: !Not [ !Equals [ !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]], '-' ]]
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AWSMarketplaceMeteringFullAccess
      Policies:
        - PolicyName: DownloadScriptFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/Linux/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
                  - !Sub
                    - arn:aws:s3:::${ScriptsBucket}/DeepSecurity/*
                    - ScriptsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ScriptsBucket
        - PolicyName: DownloadConfigurationFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/Linux/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
                  - !Sub
                    - arn:aws:s3:::${ConfigurationsBucket}/DeepSecurity/*
                    - ConfigurationsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
        - PolicyName: DownloadProductFromS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${ProductsBucket}/Linux/*
                    - ProductsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ProductsBucket
                  - !Sub
                    - arn:aws:s3:::${ProductsBucket}/DeepSecurity/*
                    - ProductsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-ProductsBucket
        - PolicyName: BackupInS3Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BackupsBucket}/DeepSecurity
                    - BackupsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-BackupsBucket
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BackupsBucket}/DeepSecurity/*
                    - BackupsBucket: !ImportValue
                        Fn::Sub: ${BucketsStackName}-BackupsBucket
        - PolicyName: InstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeLicenses
                  - ec2:DescribeImages
                  - ec2:DescribeInstances
                  - ec2:DescribeRegions
                  - ec2:DescribeSubnets
                  - ec2:DescribeTags
                  - ec2:DescribeVpcs
                  - iam:ListAccountAliases
                  - sts:AssumeRole
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeSecurityGroups
                  - iam:ListAccountAliases
                Resource: '*'
#        - PolicyName: AddInstanceToELBPolicy
#          PolicyDocument:
#            Version: 2012-10-17
#            Statement:
#              - Effect: Allow
#                Action:
#                  - ec2:DescribeLicenses
#                  - ec2:DescribeInstances
#                  - ec2:DescribeImages
#                  - ec2:DescribeRegions
#                  - ec2:DescribeVpcs
#                  - ec2:DescribeSubnets
#                  - ec2:DescribeTags
#                  - ec2:DescribeAvailabilityZones
#                  - ec2:DescribeSecurityGroups
#                  - iam:ListAccountAliases
#                  - sts:AssumeRole
#                Resource: '*'
#              - Effect: Allow
#                Action:
#                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
#                  - elasticloadbalancing:CreateLoadBalancerListeners
#                  - elasticloadbalancing:CreateLoadBalancerPolicy
#                  - elasticloadbalancing:SetLoadBalancerPoliciesOfListener
#                Resource: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/${LoadBalancer}
#              - Effect: Allow
#                Action:
#                  - iam:UploadServerCertificate
#                  - iam:GetServerCertificate
#                Resource: !Sub arn:aws:iam::${AWS::AccountId}:server-certificate/DeepSecurityElbCertificate-${AWS::StackName}
#              - Effect: Allow
#                Action:
#                  - elasticloadbalancing:DescribeLoadBalancers
#                Resource: '*'
  AgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${VPCName}-${UtilityName}-AgentSecurityGroup
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-AgentSecurityGroup
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  AgentSecurityGroupIngressAgent:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AgentSecurityGroup
      IpProtocol: tcp
      FromPort: 4118
      ToPort: 4118
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup (Agent)
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${VPCName}-${UtilityName}-LoadBalancerSecurityGroup
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup (Console)
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup (Console)
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref AgentSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-AgentSecurityGroup (Console)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - IpProtocol: tcp
          FromPort: 4120
          ToPort: 4120
          SourceSecurityGroupId: !Ref AgentSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-AgentSecurityGroup (Heartbeat)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - IpProtocol: tcp
          FromPort: 4122
          ToPort: 4122
          SourceSecurityGroupId: !Ref AgentSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-AgentSecurityGroup (Relay)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Global (All)
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-LoadBalancerSecurityGroup
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      VpcId: !ImportValue
        Fn::Sub: ${VPCStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCNetwork
          Description: VPC (ICMP)
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-LoadBalancerSecurityGroup (Console)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - IpProtocol: tcp
          FromPort: 4120
          ToPort: 4120
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-LoadBalancerSecurityGroup (Heartbeat)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - IpProtocol: tcp
          FromPort: 4122
          ToPort: 4122
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: !Sub
            - ${VPCName}-${UtilityName}-LoadBalancerSecurityGroup (Relay)
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup (SSH)
          - !Ref AWS::NoValue
        - !If
          - ConfigureWindowsBastionsIntegration
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${WindowsBastionsStackName}-InstanceSecurityGroup
            Description: !Sub ${WindowsBastionsStackName}-InstanceSecurityGroup (Console)
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup (SSH)
          - !Ref AWS::NoValue
        - !If
          - ConfigureVPNIntegration
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !ImportValue
              Fn::Sub: ${VPNStackName}-InstanceSecurityGroup
            Description: !Sub ${VPNStackName}-InstanceSecurityGroup (Console)
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork0
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 0, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 0, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork1
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 1, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 1, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork2
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 2, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 2, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (SSH)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
        - !If
          - ConfigureAdministratorNetwork3
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: !Select [ 3, !Split [ ',', !Ref AdministratorNetworks ]]
            Description: !Sub
              - ${NetworkDescription} (Console)
              - NetworkDescription: !Select [ 3, !Split [ ',', !Ref AdministratorNetworkDescriptions ]]
          - !Ref AWS::NoValue
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Global (All)
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-InstanceSecurityGroup
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroupIngressConsole:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup (Console)
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroupIngressAgent:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 4118
      ToPort: 4118
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup (Agent)
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroupIngressHeartbeat:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 4120
      ToPort: 4120
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup (Heartbeat)
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
  InstanceSecurityGroupIngressRelay:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 4122
      ToPort: 4122
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: !Sub
        - ${VPCName}-${UtilityName}-InstanceSecurityGroup (Relay)
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
  IdentifierConverter:
    Type: Custom::IdentifierConverter
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${IdentifierFunctionsStackName}-IdentifierConverterFunctionArn
      CompanyName: !Ref CompanyName
      SystemName: !Ref SystemName
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - /${CompanyCode}/${SystemNameLowerCase}/${UtilityName}/${VPCName}
        - CompanyCode: !GetAtt IdentifierConverter.CompanyCode
          SystemNameLowerCase: !GetAtt IdentifierConverter.SystemNameLowerCase
          VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      RetentionInDays: !Ref LogRetention
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - !ImportValue
          Fn::Sub: ${VPCStackName}-ApplicationSubnetA
        - !If
          - ConfigureMultiZone
          - !ImportValue
              Fn::Sub: ${VPCStackName}-ApplicationSubnetB
          - !Ref AWS::NoValue
      Instances:
        - !Ref InstanceA
        - !If [ ConfigureMultiZone, !Ref InstanceB, !Ref 'AWS::NoValue' ]
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internal
      CrossZone: true
      Listeners:
        - Protocol: TCP
          LoadBalancerPort: 80
          InstancePort: 80
        - Protocol: TCP
          LoadBalancerPort: 443
          InstancePort: 443
        - Protocol: TCP
          LoadBalancerPort: 4120
          InstancePort: 4120
        - Protocol: TCP
          LoadBalancerPort: 4122
          InstancePort: 4122
      HealthCheck:
        Target: HTTPS:443/rest/status/manager/ping
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 30
        Timeout: 5
      ConnectionSettings:
        IdleTimeout: 600
    DependsOn: LoadBalancerSecurityGroup
  GetHostName:
    Type: Custom::GetHostName
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${IdentifierFunctionsStackName}-GetHostNameFunctionArn
      CompanyName: !Ref CompanyName
      LocationName: !Ref AWS::Region
      EnvironmentName: !ImportValue
        Fn::Sub: ${VPCStackName}-VPCName
      ApplicationName: !Ref UtilityName
  GetDeepSecurityImageId:
    Type: Custom::GetDeepSecurityImageId
    Properties:
      ServiceToken: !ImportValue
        Fn::Sub: ${MarketplaceAMIFunctionsStackName}-GetDeepSecurityImageIdFunctionArn
      Region: !Ref AWS::Region
      License: PerHost
      Version: !Ref UtilityVersion
    Condition: GetImageID
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
  InstanceA:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ProductsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - ConfigureOS
            - ConfigureCFN
            - InstallSSMAgent
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
            - InstallDeepSecurityAgent
            - InstallDeepSecurityManager
            - ConfigureDeepSecurityManagerFirstNode
        ConfigureOS:
          files:
            /etc/profile.d/local.sh:
              content: |
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.InstanceA.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallCloudWatchAgent:
          sources:
            /var/tmp: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: yum install -y /var/tmp/amazon-cloudwatch-agent.rpm
              ignoreErrors: false
        ConfigureCloudWatchAgent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub
                - |
                  {
                    "agent" : {
                      "metrics_collection_interval" : 60,
                      "logfile" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                      "debug" : false
                    },
                    "metrics" : {
                      "namespace" : "${SystemName}/${VPCName}-${UtilityName}",
                      "metrics_collected" : {
                        "mem" : {
                          "measurement" : [
                            { "name" : "mem_used_percent", "rename" : "MemoryUsedPercent" }
                          ]
                        },
                        "swap" : {
                          "measurement" : [
                            { "name" : "swap_used_percent", "rename" : "SwapUsedPercent" }
                          ]
                        },
                        "disk" : {
                          "resources" : [
                            "*"
                          ],
                          "measurement" : [
                            { "name" : "used_percent", "rename" : "DiskUsedPercent" }
                          ],
                          "ignore_file_system_types": [
                            "rootfs",
                            "sysfs",
                            "tmpfs",
                            "devtmpfs"
                          ]
                        }
                      },
                      "append_dimensions" : {
                        "InstanceId" : "${!aws:InstanceId}",
                        "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                      },
                      "aggregation_dimensions" : [
                        [ "InstanceId" ],
                        [ "InstanceId", "path" ],
                        [ "AutoScalingGroupName" ]
                      ]
                    },
                    "logs" : {
                      "logs_collected" : {
                        "files" : {
                          "collect_list" : [
                            {
                              "file_path" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log"
                            },
                            {
                              "file_path" : "/var/log/cloud-init.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/cloud-init.log",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cloud-init-output.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/cloud-init-output.log"
                            },
                            {
                              "file_path" : "/var/log/cfn-init.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/cfn-init.log",
                              "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cfn-init-cmd.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/cfn-init-cmd.log",
                              "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cfn-hup.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/cfn-hup.log",
                              "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/messages",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/messages",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/secure",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/secure",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cron",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/cron",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/dmesg",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/dmesg"
                            },
                            {
                              "file_path" : "/var/log/yum.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/yum.log"
                            },
                            {
                              "file_path" : "/var/log/dsm-install.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/dsm-install.log"
                            },
                            {
                              "file_path" : "/var/log/httpd/access_log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/httpd/access_log"
                            },
                            {
                              "file_path" : "/var/log/httpd/error_log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMA/{instance_id}/var/log/httpd/error_log"
                            }
                          ]
                        }
                      }
                    }
                  }
                - VPCName: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCName
              mode: '000644'
              owner: root
              group: root
          # The Cloudwatch Logs Agent is not designed properly as a system service, so we can't use normal commands to start and stop it.
          # It's not clear how this restarts on reboot
          commands:
            01-enable-amazon-cloudwatch-agent:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        ConfigureHostName:
          files:
            /root/bin/configure-hostname:
              source: !Sub
                - https://${s3}.amazonaws.com/${ScriptsBucket}/Linux/configure-hostname
                - s3: !If [ ConfigureGlobalS3, s3, !Sub 's3-${AWS::Region}' ]
                  ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-hostname:
              command: !Sub
                - /root/bin/configure-hostname -n -h ${GetHostName.HostName}A -d ${VPCPrivateDomain}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        InstallDeepSecurityAgent:
          files:
            /var/tmp/deepsecurity-agent.zip:
              source: !Sub
                - https://${s3}.amazonaws.com/${ProductsBucket}/Linux/${DeepSecurityAgentProductObject}
                - s3: !If [ ConfigureGlobalS3, s3, !Sub 's3-${AWS::Region}' ]
                  ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-move-dsa:
              command: !Sub mv /var/tmp/deepsecurity-agent.zip /opt/trend/packages/dsm/default/${DeepSecurityAgentProductObject}
              ignoreErrors: false
        InstallDeepSecurityManager:
          packages:
            yum:
              perl-XML-Twig: []
          files:
            /etc/cfn/dsmConfiguration.properties:
              content: !Sub
                - |
                  CredentialsScreen.Administrator.Username=${UtilityAdministratorUserName}
                  CredentialsScreen.Administrator.Password=${UtilityAdministratorPassword}
                  CredentialsScreen.UseStrongPasswords=False
                  Dinstall4j.language=en
                  DatabaseScreen.DatabaseType=PostgreSQL
                  DatabaseScreen.Hostname=${DatabaseInstanceHostName}
                  DatabaseScreen.DatabaseName=${DatabaseName}
                  DatabaseScreen.Transport=TCP
                  DatabaseScreen.Username=${DatabaseUserName}
                  DatabaseScreen.Password=${DatabasePassword}
                  AddressAndPortsScreen.ManagerAddress=@@Address@@
                  AddressAndPortsScreen.ManagerPort=443
                  AddressAndPortsScreen.HeartbeatPort=4120
                  AddressAndPortsScreen.NewNode=false
                  SecurityUpdateScreen.UpdateComponents=true
                  SecurityUpdateScreen.UpdateSoftware=true
                  SmartProtectionNetworkScreen.EnableFeedback=false
                  SmartProtectionNetworkScreen.IndustryType=blank
                  RelayScreen.Install=True
                  RelayScreen.ProxyType=None
                  RelayScreen.ProxyPort=None
                  RelayScreen.Proxy=False
                  RelayScreen.AntiMalware=True
                  RelayScreen.ProxyAuthentication=False
                  Override.Automation=True
                - DatabaseInstanceHostName: !ImportValue
                    Fn::Sub: ${DeepSecurityDatabaseStackName}-DatabaseInstanceHostName
              mode: '000600'
              owner: root
              group: root
          commands:
            00-set-manager-address:
              command:
                Fn::Sub: sed -i -e "/^AddressAndPortsScreen.ManagerAddress=/s/@@Address@@/$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4/)/" /etc/cfn/dsmConfiguration.properties
              ignoreErrors: false
#            01-install-dsm:
#              command: /opt/trend/packages/dsm/default/ManagerAWS.sh -q -console -varfile /etc/cfn/dsmConfiguration.properties >> /var/log/dsm-install.log
#              cwd: /opt/trend/packages/dsm/default/
#              ignoreErrors: false
        ConfigureDeepSecurityManagerFirstNode:
          files:
            /root/bin/set-aia-settings.sh:
              source: !Sub
                - https://${s3}.amazonaws.com/${ScriptsBucket}/DeepSecurity/set-aia-settings.sh
                - s3: !If [ ConfigureGlobalS3, s3, !Sub 's3-${AWS::Region}' ]
                  ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
            /root/bin/kill-mp-web-installer.sh:
              source: !Sub
                - https://${s3}.amazonaws.com/${ScriptsBucket}/DeepSecurity/kill-mp-web-installer.sh
                - s3: !If [ ConfigureGlobalS3, s3, !Sub 's3-${AWS::Region}' ]
                  ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
            /root/bin/add-aws-account-with-instance-role.sh:
              source: !Sub
                - https://${s3}.amazonaws.com/${ScriptsBucket}/DeepSecurity/add-aws-account-with-instance-role.sh
                - s3: !If [ ConfigureGlobalS3, s3, !Sub 's3-${AWS::Region}' ]
                  ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
            /root/bin/reactivate-manager.sh:
              source: !Sub
                - https://${s3}.amazonaws.com/${ScriptsBucket}/DeepSecurity/reactivate-manager.sh
                - s3: !If [ ConfigureGlobalS3, s3, !Sub 's3-${AWS::Region}' ]
                  ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
#          commands:
#            01-set-aia-settings:
#              command: !Sub /root/bin/set-aia-settings.sh ${UtilityAdministratorUserName} ${UtilityAdministratorPassword}
#              ignoreErrors: false
#            02-add-aws-account-with-instance-role:
#              command: !Sub /root/bin/add-aws-account-with-instance-role.sh ${UtilityAdministratorUserName} ${UtilityAdministratorPassword} localhost 443 ${AWS::Region}
#              ignoreErrors: false
#            03-kill-mp-web-installer:
#              command: !Sub /root/bin/kill-mp-web-installer.sh
#              ignoreErrors: false
#            04-reactivate-manager:
#              command: !Sub /root/bin/reactivate-manager.sh ${UtilityAdministratorUserName} ${UtilityAdministratorPassword} 443 >> /var/log/reactivate-manager.log
#              ignoreErrors: false
    Properties:
      ImageId: !If [ GetImageID, !GetAtt GetDeepSecurityImageId.ImageId, !FindInMap [ DefaultImageIdMap, !Ref 'AWS::Region', default ]]
      InstanceType: !FindInMap [ InstanceTypeMap, Manager, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ ConfigureKey, !Ref KeyName, !Ref 'AWS::NoValue' ]
      Monitoring: true
      NetworkInterfaces:
        - Description: !Sub
            - ${VPCName}-${UtilityName}-NetworkInterface-eth0
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
          DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-ApplicationSubnetA
          GroupSet:
            - !Ref InstanceSecurityGroup
            - !ImportValue
              Fn::Sub: ${DeepSecurityDatabaseStackName}-ClientSecurityGroup
            - !If
                - ConfigureActiveDirectoryIntegration
                - !ImportValue
                    Fn::Sub: ${DirectoryStackName}-DomainMemberSecurityGroup
                - !Ref 'AWS::NoValue'
          DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-InstanceA
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - Key: HostName
          Value: !Sub ${GetHostName.HostName}01a
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log | logger -t user-data) 2>&1

          yum update -y aws-cfn-bootstrap

          /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource InstanceA --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
  InstanceAPrivateHostNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS HostName for ${UtilityName} InstanceA
      Name: !Sub
        - ${GetHostName.HostName}01a.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt InstanceA.PrivateIp
  InstanceARecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: When the instance status check fails for 10 consecutive minutes, notify and recover
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
        - !Sub arn:aws:automate:${AWS::Region}:ec2:recover
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 10
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceA
    DependsOn: InstanceA
  InstanceACPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The average CPU Utilization is greater than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceA
  InstanceAMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The used memory is greater than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub
        - ${SystemName}/${VPCName}-${UtilityName}
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      MetricName: MemoryUsedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceA
  InstanceADisk1Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The disk / percent used is more than than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub
        - ${SystemName}/${VPCName}-${UtilityName}
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      MetricName: DiskUsedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceA
        - Name: path
          Value: /
  InstanceB:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Credentials:
          type: S3
          roleName: !Ref Role
          buckets:
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ScriptsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ConfigurationsBucket
            - !ImportValue
              Fn::Sub: ${BucketsStackName}-ProductsBucket
      AWS::CloudFormation::Init:
        configSets:
          All:
            - ConfigureOS
            - ConfigureCFN
            - InstallSSMAgent
            - InstallCloudWatchAgent
            - ConfigureCloudWatchAgent
            - ConfigureHostName
            - InstallDeepSecurityAgent
            - InstallDeepSecurityManagerSecondNode
        ConfigureOS:
          packages:
            yum:
              git: []
          files:
            /etc/profile.d/local.sh:
              content: |
                alias lsa='ls -lAF'
                alias ip4='ip addr | grep " inet "'
              mode: '000644'
              owner: root
              group: root
        ConfigureCFN:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.InstanceB.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallSSMAgent:
          packages:
            rpm:
              amazon-ssm-agent:
                - https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        InstallCloudWatchAgent:
          sources:
            /var/tmp: https://s3.amazonaws.com/amazoncloudwatch-agent/linux/amd64/latest/AmazonCloudWatchAgent.zip
          commands:
            01-install-cloudwatch-agent:
              command: yum install -y /var/tmp/amazon-cloudwatch-agent.rpm
              ignoreErrors: false
        ConfigureCloudWatchAgent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: !Sub
                - |
                  {
                    "agent" : {
                      "metrics_collection_interval" : 60,
                      "logfile" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                      "debug" : false
                    },
                    "metrics" : {
                      "namespace" : "${SystemName}/${VPCName}-${UtilityName}",
                      "metrics_collected" : {
                        "mem" : {
                          "measurement" : [
                            { "name" : "mem_used_percent", "rename" : "MemoryUsedPercent" }
                          ]
                        },
                        "swap" : {
                          "measurement" : [
                            { "name" : "swap_used_percent", "rename" : "SwapUsedPercent" }
                          ]
                        },
                        "disk" : {
                          "resources" : [
                            "*"
                          ],
                          "measurement" : [
                            { "name" : "used_percent", "rename" : "DiskUsedPercent" }
                          ],
                          "ignore_file_system_types": [
                            "rootfs",
                            "sysfs",
                            "tmpfs",
                            "devtmpfs"
                          ]
                        }
                      },
                      "append_dimensions" : {
                        "InstanceId" : "${!aws:InstanceId}",
                        "AutoScalingGroupName" : "${!aws:AutoScalingGroupName}"
                      },
                      "aggregation_dimensions" : [
                        [ "InstanceId" ],
                        [ "InstanceId", "path" ],
                        [ "AutoScalingGroupName" ]
                      ]
                    },
                    "logs" : {
                      "logs_collected" : {
                        "files" : {
                          "collect_list" : [
                            {
                              "file_path" : "/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/amazon/cloudwatch/amazon-cloudwatch-agent.log"
                            },
                            {
                              "file_path" : "/var/log/cloud-init.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/cloud-init.log",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cloud-init-output.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/cloud-init-output.log"
                            },
                            {
                              "file_path" : "/var/log/cfn-init.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/cfn-init.log",
                              "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cfn-init-cmd.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/cfn-init-cmd.log",
                              "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cfn-hup.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/cfn-hup.log",
                              "timestamp_format" : "%Y-%m-%d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/messages",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/messages",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/secure",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/secure",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/cron",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/cron",
                              "timestamp_format" : "%b %d %H:%M:%S"
                            },
                            {
                              "file_path" : "/var/log/dmesg",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/dmesg"
                            },
                            {
                              "file_path" : "/var/log/yum.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/yum.log"
                            },
                            {
                              "file_path" : "/var/log/dsm-install.log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/dsm-install.log"
                            },
                            {
                              "file_path" : "/var/log/httpd/access_log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/httpd/access_log"
                            },
                            {
                              "file_path" : "/var/log/httpd/error_log",
                              "log_group_name" : "${LogGroup}",
                              "log_stream_name" : "DSMB/{instance_id}/var/log/httpd/error_log"
                            }
                          ]
                        }
                      }
                    }
                  }
                - VPCName: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCName
              mode: '000644'
              owner: root
              group: root
          # The Cloudwatch Logs Agent is not designed properly as a system service, so we can't use normal commands to start and stop it.
          # It's not clear how this restarts on reboot
          commands:
            01-enable-amazon-cloudwatch-agent:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        ConfigureHostName:
          files:
            /root/bin/configure-hostname:
              source: !Sub
                - https://${s3}.amazonaws.com/${ScriptsBucket}/Linux/configure-hostname
                - s3: !If [ ConfigureGlobalS3, s3, !Sub 's3-${AWS::Region}' ]
                  ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-configure-hostname:
              command: !Sub
                - /root/bin/configure-hostname -n -h ${GetHostName.HostName}B -d ${VPCPrivateDomain}
                - VPCPrivateDomain: !ImportValue
                    Fn::Sub: ${VPCStackName}-VPCPrivateDomain
              ignoreErrors: false
        InstallDeepSecurityAgent:
          files:
            /var/tmp/deepsecurity-agent.zip:
              source: !Sub
                - https://${s3}.amazonaws.com/${ProductsBucket}/Linux/${DeepSecurityAgentProductObject}
                - s3: !If [ ConfigureGlobalS3, s3, !Sub 's3-${AWS::Region}' ]
                  ProductsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ProductsBucket
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
          commands:
            01-move-dsa:
              command: !Sub mv /var/tmp/deepsecurity-agent.zip /opt/trend/packages/dsm/default/${DeepSecurityAgentProductObject}
              ignoreErrors: false
        InstallDeepSecurityManager:
          packages:
            yum:
              perl-XML-Twig: []
          files:
            /etc/cfn/dsmConfiguration.properties:
              content: !Sub
                - |
                  CredentialsScreen.Administrator.Username=${UtilityAdministratorUserName}
                  CredentialsScreen.Administrator.Password=${UtilityAdministratorPassword}
                  CredentialsScreen.UseStrongPasswords=False
                  Dinstall4j.language=en
                  DatabaseScreen.DatabaseType=PostgreSQL
                  DatabaseScreen.Hostname=${DatabaseInstanceHostName}
                  DatabaseScreen.DatabaseName=${DatabaseName}
                  DatabaseScreen.Transport=TCP
                  DatabaseScreen.Username=${DatabaseUserName}
                  DatabaseScreen.Password=${DatabasePassword}
                  AddressAndPortsScreen.ManagerAddress=@@Address@@
                  AddressAndPortsScreen.ManagerPort=443
                  AddressAndPortsScreen.HeartbeatPort=4120
                  AddressAndPortsScreen.NewNode=true
                  UpgradeVerificationScreen.Overwrite=False
                  SecurityUpdateScreen.UpdateComponents=true
                  SecurityUpdateScreen.UpdateSoftware=true
                  SmartProtectionNetworkScreen.EnableFeedback=false
                  SmartProtectionNetworkScreen.IndustryType=blank
                  RelayScreen.Install=True
                  RelayScreen.ProxyType=None
                  RelayScreen.ProxyPort=None
                  RelayScreen.Proxy=False
                  RelayScreen.AntiMalware=True
                  RelayScreen.ProxyAuthentication=False
                  Override.Automation=True
                - DatabaseInstanceHostName: !ImportValue
                    Fn::Sub: ${DeepSecurityDatabaseStackName}-DatabaseInstanceHostName
              mode: '000600'
              owner: root
              group: root
          commands:
            00-set-manager-address:
              command:
                Fn::Sub: sed -i -e "/^AddressAndPortsScreen.ManagerAddress=/s/@@Address@@/$(curl -s -m 60 http://169.254.169.254/latest/meta-data/local-ipv4/)/" /etc/cfn/dsmConfiguration.properties
              ignoreErrors: false
#            01-install-dsm:
#              command: /opt/trend/packages/dsm/default/ManagerAWS.sh -q -console -varfile /etc/cfn/dsmConfiguration.properties >> /var/log/dsm-install.log
#              cwd: /opt/trend/packages/dsm/default/
#              ignoreErrors: false
        ConfigureDeepSecurityManagerSecondNode:
          files:
            /root/bin/reactivate-manager.sh:
              source: !Sub
                - https://${s3}.amazonaws.com/${ScriptsBucket}/DeepSecurity/reactivate-manager.sh
                - s3: !If [ ConfigureGlobalS3, s3, !Sub 's3-${AWS::Region}' ]
                  ScriptsBucket: !ImportValue
                    Fn::Sub: ${BucketsStackName}-ScriptsBucket
              authentication: S3Credentials
              mode: '000700'
              owner: root
              group: root
#          commands:
#            01-reactivate-manager:
#              command: !Sub /root/bin/reactivate-manager.sh ${UtilityAdministratorUserName} ${UtilityAdministratorPassword} 443 >> /var/log/reactivate-manager.log
#              ignoreErrors: false
    Properties:
      ImageId: !If [ GetImageID, !GetAtt GetDeepSecurityImageId.ImageId, !FindInMap [ DefaultImageIdMap, !Ref 'AWS::Region', default ]]
      InstanceType: !FindInMap [ InstanceTypeMap, Manager, !Ref EnvironmentType ]
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !If [ ConfigureKey, !Ref KeyName, !Ref 'AWS::NoValue' ]
      Monitoring: true
      NetworkInterfaces:
        - Description: !Sub
            - ${VPCName}-${UtilityName}-NetworkInterface-eth0
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
          DeviceIndex: 0
          SubnetId: !ImportValue
            Fn::Sub: ${VPCStackName}-ApplicationSubnetB
          GroupSet:
            - !Ref InstanceSecurityGroup
            - !ImportValue
              Fn::Sub: ${DeepSecurityDatabaseStackName}-ClientSecurityGroup
            - !If
                - ConfigureActiveDirectoryIntegration
                - !ImportValue
                    Fn::Sub: ${DirectoryStackName}-DomainMemberSecurityGroup
                - !Ref 'AWS::NoValue'
          DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCName}-${UtilityName}-InstanceB
            - VPCName: !ImportValue
                Fn::Sub: ${VPCStackName}-VPCName
        - Key: HostName
          Value: !Sub ${GetHostName.HostName}01b
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log | logger -t user-data) 2>&1

          yum update -y aws-cfn-bootstrap

          /opt/aws/bin/cfn-init --verbose --configsets All --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
          /opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource InstanceB --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    DependsOn: InstanceA
    Condition: ConfigureMultiZone
  InstanceBPrivateHostNameRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue
        Fn::Sub: ${VPCStackName}-PrivateHostedZone
      Comment: !Sub Private DNS HostName for ${UtilityName} InstanceB
      Name: !Sub
        - ${GetHostName.HostName}01b.${VPCPrivateDomain}.
        - VPCPrivateDomain: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCPrivateDomain
      Type: A
      TTL: 900
      ResourceRecords:
        - !GetAtt InstanceB.PrivateIp
  InstanceBRecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: When the instance status check fails for 10 consecutive minutes, notify and recover
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
        - !Sub arn:aws:automate:${AWS::Region}:ec2:recover
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 10
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceB
    DependsOn: InstanceB
  InstanceBCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The average CPU Utilization is greater than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: AWS/EC2
      MetricName: CPUUtilization
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceB
  InstanceBMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The used memory is greater than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub
        - ${SystemName}/${VPCName}-${UtilityName}
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      MetricName: MemoryUsedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceB
  InstanceBDisk1Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: The disk / percent used is more than than 90% over 3 consecutive minutes
      AlarmActions:
        - !ImportValue
          Fn::Sub: ${TopicsStackName}-AlarmsTopic
      Namespace: !Sub
        - ${SystemName}/${VPCName}-${UtilityName}
        - VPCName: !ImportValue
            Fn::Sub: ${VPCStackName}-VPCName
      MetricName: DiskUsedPercent
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref InstanceB
        - Name: path
          Value: /
Outputs:
  AgentSecurityGroup:
    Description: The Agent SecurityGroup
    Value: !Ref AgentSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-AgentSecurityGroup
  LoadBalancerSecurityGroup:
    Description: The LoadBalancer SecurityGroup
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerSecurityGroup
  InstanceSecurityGroup:
    Description: The Instance SecurityGroup
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-InstanceSecurityGroup
  LoadBalancerDNSName:
    Description: The LoadBalancer DNSName
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerDNSName
